"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apidevtools";
exports.ids = ["vendor-chunks/@apidevtools"];
exports.modules = {

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/bundle.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/bundle.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ref_js_1 = __importDefault(__webpack_require__(/*! ./ref.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js\"));\nconst pointer_js_1 = __importDefault(__webpack_require__(/*! ./pointer.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js\"));\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nexports[\"default\"] = bundle;\n/**\n * Bundles all external JSON references into the main JSON schema, thus resulting in a schema that\n * only has *internal* references, not any *external* references.\n * This method mutates the JSON schema object, adding new references and re-mapping existing ones.\n *\n * @param parser\n * @param options\n */ function bundle(parser, options) {\n    // console.log('Bundling $ref pointers in %s', parser.$refs._root$Ref.path);\n    // Build an inventory of all $ref pointers in the JSON Schema\n    const inventory = [];\n    crawl(parser, \"schema\", parser.$refs._root$Ref.path + \"#\", \"#\", 0, inventory, parser.$refs, options);\n    // Remap all $ref pointers\n    remap(inventory);\n}\n/**\n * Recursively crawls the given value, and inventories all JSON references.\n *\n * @param parent - The object containing the value to crawl. If the value is not an object or array, it will be ignored.\n * @param key - The property key of `parent` to be crawled\n * @param path - The full path of the property being crawled, possibly with a JSON Pointer in the hash\n * @param pathFromRoot - The path of the property being crawled, from the schema root\n * @param inventory - An array of already-inventoried $ref pointers\n * @param $refs\n * @param options\n */ function crawl(parent, key, path, pathFromRoot, indirections, inventory, $refs, options) {\n    const obj = key === null ? parent : parent[key];\n    if (obj && typeof obj === \"object\" && !ArrayBuffer.isView(obj)) {\n        // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.\n        if (ref_js_1.default.isAllowed$Ref(obj)) {\n            inventory$Ref(parent, key, path, pathFromRoot, indirections, inventory, $refs, options);\n        } else {\n            // Crawl the object in a specific order that's optimized for bundling.\n            // This is important because it determines how `pathFromRoot` gets built,\n            // which later determines which keys get dereferenced and which ones get remapped\n            const keys = Object.keys(obj).sort((a, b)=>{\n                // Most people will expect references to be bundled into the the \"definitions\" property,\n                // so we always crawl that property first, if it exists.\n                if (a === \"definitions\") {\n                    return -1;\n                } else if (b === \"definitions\") {\n                    return 1;\n                } else {\n                    // Otherwise, crawl the keys based on their length.\n                    // This produces the shortest possible bundled references\n                    return a.length - b.length;\n                }\n            });\n            // eslint-disable-next-line no-shadow\n            for (const key of keys){\n                const keyPath = pointer_js_1.default.join(path, key);\n                const keyPathFromRoot = pointer_js_1.default.join(pathFromRoot, key);\n                const value = obj[key];\n                // @ts-expect-error TS(2554): Expected 2 arguments, but got 1.\n                if (ref_js_1.default.isAllowed$Ref(value)) {\n                    inventory$Ref(obj, key, path, keyPathFromRoot, indirections, inventory, $refs, options);\n                } else {\n                    crawl(obj, key, keyPath, keyPathFromRoot, indirections, inventory, $refs, options);\n                }\n            }\n        }\n    }\n}\n/**\n * Inventories the given JSON Reference (i.e. records detailed information about it so we can\n * optimize all $refs in the schema), and then crawls the resolved value.\n *\n * @param $refParent - The object that contains a JSON Reference as one of its keys\n * @param $refKey - The key in `$refParent` that is a JSON Reference\n * @param path - The full path of the JSON Reference at `$refKey`, possibly with a JSON Pointer in the hash\n * @param indirections - unknown\n * @param pathFromRoot - The path of the JSON Reference at `$refKey`, from the schema root\n * @param inventory - An array of already-inventoried $ref pointers\n * @param $refs\n * @param options\n */ function inventory$Ref($refParent, $refKey, path, pathFromRoot, indirections, inventory, $refs, options) {\n    const $ref = $refKey === null ? $refParent : $refParent[$refKey];\n    const $refPath = url.resolve(path, $ref.$ref);\n    const pointer = $refs._resolve($refPath, pathFromRoot, options);\n    if (pointer === null) {\n        return;\n    }\n    const depth = pointer_js_1.default.parse(pathFromRoot).length;\n    const file = url.stripHash(pointer.path);\n    const hash = url.getHash(pointer.path);\n    const external = file !== $refs._root$Ref.path;\n    const extended = ref_js_1.default.isExtended$Ref($ref);\n    indirections += pointer.indirections;\n    const existingEntry = findInInventory(inventory, $refParent, $refKey);\n    if (existingEntry) {\n        // This $Ref has already been inventoried, so we don't need to process it again\n        if (depth < existingEntry.depth || indirections < existingEntry.indirections) {\n            removeFromInventory(inventory, existingEntry);\n        } else {\n            return;\n        }\n    }\n    inventory.push({\n        $ref,\n        parent: $refParent,\n        key: $refKey,\n        pathFromRoot,\n        depth,\n        file,\n        hash,\n        value: pointer.value,\n        circular: pointer.circular,\n        extended,\n        external,\n        indirections\n    });\n    // Recursively crawl the resolved value\n    if (!existingEntry || external) {\n        crawl(pointer.value, null, pointer.path, pathFromRoot, indirections + 1, inventory, $refs, options);\n    }\n}\n/**\n * Re-maps every $ref pointer, so that they're all relative to the root of the JSON Schema.\n * Each referenced value is dereferenced EXACTLY ONCE.  All subsequent references to the same\n * value are re-mapped to point to the first reference.\n *\n * @example: {\n *    first: { $ref: somefile.json#/some/part },\n *    second: { $ref: somefile.json#/another/part },\n *    third: { $ref: somefile.json },\n *    fourth: { $ref: somefile.json#/some/part/sub/part }\n *  }\n *\n * In this example, there are four references to the same file, but since the third reference points\n * to the ENTIRE file, that's the only one we need to dereference.  The other three can just be\n * remapped to point inside the third one.\n *\n * On the other hand, if the third reference DIDN'T exist, then the first and second would both need\n * to be dereferenced, since they point to different parts of the file. The fourth reference does NOT\n * need to be dereferenced, because it can be remapped to point inside the first one.\n *\n * @param inventory\n */ function remap(inventory) {\n    // Group & sort all the $ref pointers, so they're in the order that we need to dereference/remap them\n    inventory.sort((a, b)=>{\n        if (a.file !== b.file) {\n            // Group all the $refs that point to the same file\n            return a.file < b.file ? -1 : +1;\n        } else if (a.hash !== b.hash) {\n            // Group all the $refs that point to the same part of the file\n            return a.hash < b.hash ? -1 : +1;\n        } else if (a.circular !== b.circular) {\n            // If the $ref points to itself, then sort it higher than other $refs that point to this $ref\n            return a.circular ? -1 : +1;\n        } else if (a.extended !== b.extended) {\n            // If the $ref extends the resolved value, then sort it lower than other $refs that don't extend the value\n            return a.extended ? +1 : -1;\n        } else if (a.indirections !== b.indirections) {\n            // Sort direct references higher than indirect references\n            return a.indirections - b.indirections;\n        } else if (a.depth !== b.depth) {\n            // Sort $refs by how close they are to the JSON Schema root\n            return a.depth - b.depth;\n        } else {\n            // Determine how far each $ref is from the \"definitions\" property.\n            // Most people will expect references to be bundled into the the \"definitions\" property if possible.\n            const aDefinitionsIndex = a.pathFromRoot.lastIndexOf(\"/definitions\");\n            const bDefinitionsIndex = b.pathFromRoot.lastIndexOf(\"/definitions\");\n            if (aDefinitionsIndex !== bDefinitionsIndex) {\n                // Give higher priority to the $ref that's closer to the \"definitions\" property\n                return bDefinitionsIndex - aDefinitionsIndex;\n            } else {\n                // All else is equal, so use the shorter path, which will produce the shortest possible reference\n                return a.pathFromRoot.length - b.pathFromRoot.length;\n            }\n        }\n    });\n    let file, hash, pathFromRoot;\n    for (const entry of inventory){\n        // console.log('Re-mapping $ref pointer \"%s\" at %s', entry.$ref.$ref, entry.pathFromRoot);\n        if (!entry.external) {\n            // This $ref already resolves to the main JSON Schema file\n            entry.$ref.$ref = entry.hash;\n        } else if (entry.file === file && entry.hash === hash) {\n            // This $ref points to the same value as the prevous $ref, so remap it to the same path\n            entry.$ref.$ref = pathFromRoot;\n        } else if (entry.file === file && entry.hash.indexOf(hash + \"/\") === 0) {\n            // This $ref points to a sub-value of the prevous $ref, so remap it beneath that path\n            entry.$ref.$ref = pointer_js_1.default.join(pathFromRoot, pointer_js_1.default.parse(entry.hash.replace(hash, \"#\")));\n        } else {\n            // We've moved to a new file or new hash\n            file = entry.file;\n            hash = entry.hash;\n            pathFromRoot = entry.pathFromRoot;\n            // This is the first $ref to point to this value, so dereference the value.\n            // Any other $refs that point to the same value will point to this $ref instead\n            entry.$ref = entry.parent[entry.key] = ref_js_1.default.dereference(entry.$ref, entry.value);\n            if (entry.circular) {\n                // This $ref points to itself\n                entry.$ref.$ref = entry.pathFromRoot;\n            }\n        }\n    // console.log('    new value: %s', (entry.$ref && entry.$ref.$ref) ? entry.$ref.$ref : '[object Object]');\n    }\n}\n/**\n * TODO\n */ function findInInventory(inventory, $refParent, $refKey) {\n    for(let i = 0; i < inventory.length; i++){\n        const existingEntry = inventory[i];\n        if (existingEntry.parent === $refParent && existingEntry.key === $refKey) {\n            return existingEntry;\n        }\n    }\n}\nfunction removeFromInventory(inventory, entry) {\n    const index = inventory.indexOf(entry);\n    inventory.splice(index, 1);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/bundle.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/dereference.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/dereference.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ref_js_1 = __importDefault(__webpack_require__(/*! ./ref.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js\"));\nconst pointer_js_1 = __importDefault(__webpack_require__(/*! ./pointer.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js\"));\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nexports[\"default\"] = dereference;\n/**\n * Crawls the JSON schema, finds all JSON references, and dereferences them.\n * This method mutates the JSON schema object, replacing JSON references with their resolved value.\n *\n * @param parser\n * @param options\n */ function dereference(parser, options) {\n    // console.log('Dereferencing $ref pointers in %s', parser.$refs._root$Ref.path);\n    const dereferenced = crawl(parser.schema, parser.$refs._root$Ref.path, \"#\", new Set(), new Set(), new Map(), parser.$refs, options);\n    parser.$refs.circular = dereferenced.circular;\n    parser.schema = dereferenced.value;\n}\n/**\n * Recursively crawls the given value, and dereferences any JSON references.\n *\n * @param obj - The value to crawl. If it's not an object or array, it will be ignored.\n * @param path - The full path of `obj`, possibly with a JSON Pointer in the hash\n * @param pathFromRoot - The path of `obj` from the schema root\n * @param parents - An array of the parent objects that have already been dereferenced\n * @param processedObjects - An array of all the objects that have already been processed\n * @param dereferencedCache - An map of all the dereferenced objects\n * @param $refs\n * @param options\n * @returns\n */ function crawl(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options) {\n    let dereferenced;\n    const result = {\n        value: obj,\n        circular: false\n    };\n    const isExcludedPath = options.dereference.excludedPathMatcher || (()=>false);\n    if (options.dereference.circular === \"ignore\" || !processedObjects.has(obj)) {\n        if (obj && typeof obj === \"object\" && !ArrayBuffer.isView(obj) && !isExcludedPath(pathFromRoot)) {\n            parents.add(obj);\n            processedObjects.add(obj);\n            if (ref_js_1.default.isAllowed$Ref(obj, options)) {\n                dereferenced = dereference$Ref(obj, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n                result.circular = dereferenced.circular;\n                result.value = dereferenced.value;\n            } else {\n                for (const key of Object.keys(obj)){\n                    const keyPath = pointer_js_1.default.join(path, key);\n                    const keyPathFromRoot = pointer_js_1.default.join(pathFromRoot, key);\n                    if (isExcludedPath(keyPathFromRoot)) {\n                        continue;\n                    }\n                    const value = obj[key];\n                    let circular = false;\n                    if (ref_js_1.default.isAllowed$Ref(value, options)) {\n                        dereferenced = dereference$Ref(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n                        circular = dereferenced.circular;\n                        // Avoid pointless mutations; breaks frozen objects to no profit\n                        if (obj[key] !== dereferenced.value) {\n                            obj[key] = dereferenced.value;\n                            if (options.dereference.onDereference) {\n                                options.dereference.onDereference(value.$ref, obj[key]);\n                            }\n                        }\n                    } else {\n                        if (!parents.has(value)) {\n                            dereferenced = crawl(value, keyPath, keyPathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n                            circular = dereferenced.circular;\n                            // Avoid pointless mutations; breaks frozen objects to no profit\n                            if (obj[key] !== dereferenced.value) {\n                                obj[key] = dereferenced.value;\n                            }\n                        } else {\n                            circular = foundCircularReference(keyPath, $refs, options);\n                        }\n                    }\n                    // Set the \"isCircular\" flag if this or any other property is circular\n                    result.circular = result.circular || circular;\n                }\n            }\n            parents.delete(obj);\n        }\n    }\n    return result;\n}\n/**\n * Dereferences the given JSON Reference, and then crawls the resulting value.\n *\n * @param $ref - The JSON Reference to resolve\n * @param path - The full path of `$ref`, possibly with a JSON Pointer in the hash\n * @param pathFromRoot - The path of `$ref` from the schema root\n * @param parents - An array of the parent objects that have already been dereferenced\n * @param processedObjects - An array of all the objects that have already been dereferenced\n * @param dereferencedCache - An map of all the dereferenced objects\n * @param $refs\n * @param options\n * @returns\n */ function dereference$Ref($ref, path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options) {\n    // console.log('Dereferencing $ref pointer \"%s\" at %s', $ref.$ref, path);\n    const isExternalRef = ref_js_1.default.isExternal$Ref($ref);\n    const shouldResolveOnCwd = isExternalRef && options?.dereference.externalReferenceResolution === \"root\";\n    const $refPath = url.resolve(shouldResolveOnCwd ? url.cwd() : path, $ref.$ref);\n    const cache = dereferencedCache.get($refPath);\n    if (cache) {\n        const refKeys = Object.keys($ref);\n        if (refKeys.length > 1) {\n            const extraKeys = {};\n            for (const key of refKeys){\n                if (key !== \"$ref\" && !(key in cache.value)) {\n                    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n                    extraKeys[key] = $ref[key];\n                }\n            }\n            return {\n                circular: cache.circular,\n                value: Object.assign({}, cache.value, extraKeys)\n            };\n        }\n        return cache;\n    }\n    const pointer = $refs._resolve($refPath, path, options);\n    if (pointer === null) {\n        return {\n            circular: false,\n            value: null\n        };\n    }\n    // Check for circular references\n    const directCircular = pointer.circular;\n    let circular = directCircular || parents.has(pointer.value);\n    circular && foundCircularReference(path, $refs, options);\n    // Dereference the JSON reference\n    let dereferencedValue = ref_js_1.default.dereference($ref, pointer.value);\n    // Crawl the dereferenced value (unless it's circular)\n    if (!circular) {\n        // Determine if the dereferenced value is circular\n        const dereferenced = crawl(dereferencedValue, pointer.path, pathFromRoot, parents, processedObjects, dereferencedCache, $refs, options);\n        circular = dereferenced.circular;\n        dereferencedValue = dereferenced.value;\n    }\n    if (circular && !directCircular && options.dereference.circular === \"ignore\") {\n        // The user has chosen to \"ignore\" circular references, so don't change the value\n        dereferencedValue = $ref;\n    }\n    if (directCircular) {\n        // The pointer is a DIRECT circular reference (i.e. it references itself).\n        // So replace the $ref path with the absolute path from the JSON Schema root\n        dereferencedValue.$ref = pathFromRoot;\n    }\n    const dereferencedObject = {\n        circular,\n        value: dereferencedValue\n    };\n    // only cache if no extra properties than $ref\n    if (Object.keys($ref).length === 1) {\n        dereferencedCache.set($refPath, dereferencedObject);\n    }\n    return dereferencedObject;\n}\n/**\n * Called when a circular reference is found.\n * It sets the {@link $Refs#circular} flag, and throws an error if options.dereference.circular is false.\n *\n * @param keyPath - The JSON Reference path of the circular reference\n * @param $refs\n * @param options\n * @returns - always returns true, to indicate that a circular reference was found\n */ function foundCircularReference(keyPath, $refs, options) {\n    $refs.circular = true;\n    if (!options.dereference.circular) {\n        throw ono_1.ono.reference(`Circular $ref pointer found at ${keyPath}`);\n    }\n    return true;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/dereference.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dereference = exports.bundle = exports.resolve = exports.parse = exports.$RefParser = exports.UnmatchedResolverError = exports.UnmatchedParserError = exports.ParserError = exports.ResolverError = exports.MissingPointerError = exports.InvalidPointerError = exports.JSONParserError = void 0;\nconst refs_js_1 = __importDefault(__webpack_require__(/*! ./refs.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/refs.js\"));\nconst parse_js_1 = __importDefault(__webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parse.js\"));\nconst normalize_args_js_1 = __importDefault(__webpack_require__(/*! ./normalize-args.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/normalize-args.js\"));\nconst resolve_external_js_1 = __importDefault(__webpack_require__(/*! ./resolve-external.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolve-external.js\"));\nconst bundle_js_1 = __importDefault(__webpack_require__(/*! ./bundle.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/bundle.js\"));\nconst dereference_js_1 = __importDefault(__webpack_require__(/*! ./dereference.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/dereference.js\"));\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst errors_js_1 = __webpack_require__(/*! ./util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nObject.defineProperty(exports, \"JSONParserError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.JSONParserError;\n    }\n}));\nObject.defineProperty(exports, \"InvalidPointerError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.InvalidPointerError;\n    }\n}));\nObject.defineProperty(exports, \"MissingPointerError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.MissingPointerError;\n    }\n}));\nObject.defineProperty(exports, \"ResolverError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.ResolverError;\n    }\n}));\nObject.defineProperty(exports, \"ParserError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.ParserError;\n    }\n}));\nObject.defineProperty(exports, \"UnmatchedParserError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.UnmatchedParserError;\n    }\n}));\nObject.defineProperty(exports, \"UnmatchedResolverError\", ({\n    enumerable: true,\n    get: function() {\n        return errors_js_1.UnmatchedResolverError;\n    }\n}));\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst maybe_js_1 = __importDefault(__webpack_require__(/*! ./util/maybe.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/maybe.js\"));\n/**\n * This class parses a JSON schema, builds a map of its JSON references and their resolved values,\n * and provides methods for traversing, manipulating, and dereferencing those references.\n *\n * @class\n */ class $RefParser {\n    constructor(){\n        /**\n         * The parsed (and possibly dereferenced) JSON schema object\n         *\n         * @type {object}\n         * @readonly\n         */ this.schema = null;\n        /**\n         * The resolved JSON references\n         *\n         * @type {$Refs}\n         * @readonly\n         */ this.$refs = new refs_js_1.default();\n    }\n    async parse() {\n        const args = (0, normalize_args_js_1.default)(arguments);\n        let promise;\n        if (!args.path && !args.schema) {\n            const err = (0, ono_1.ono)(`Expected a file path, URL, or object. Got ${args.path || args.schema}`);\n            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));\n        }\n        // Reset everything\n        this.schema = null;\n        this.$refs = new refs_js_1.default();\n        // If the path is a filesystem path, then convert it to a URL.\n        // NOTE: According to the JSON Reference spec, these should already be URLs,\n        // but, in practice, many people use local filesystem paths instead.\n        // So we're being generous here and doing the conversion automatically.\n        // This is not intended to be a 100% bulletproof solution.\n        // If it doesn't work for your use-case, then use a URL instead.\n        let pathType = \"http\";\n        if (url.isFileSystemPath(args.path)) {\n            args.path = url.fromFileSystemPath(args.path);\n            pathType = \"file\";\n        } else if (!args.path && args.schema && args.schema.$id) {\n            // when schema id has defined an URL should use that hostname to request the references,\n            // instead of using the current page URL\n            const params = url.parse(args.schema.$id);\n            const port = params.protocol === \"https:\" ? 443 : 80;\n            args.path = `${params.protocol}//${params.hostname}:${port}`;\n        }\n        // Resolve the absolute path of the schema\n        args.path = url.resolve(url.cwd(), args.path);\n        if (args.schema && typeof args.schema === \"object\") {\n            // A schema object was passed-in.\n            // So immediately add a new $Ref with the schema object as its value\n            const $ref = this.$refs._add(args.path);\n            $ref.value = args.schema;\n            $ref.pathType = pathType;\n            promise = Promise.resolve(args.schema);\n        } else {\n            // Parse the schema file/url\n            promise = (0, parse_js_1.default)(args.path, this.$refs, args.options);\n        }\n        try {\n            const result = await promise;\n            if (result !== null && typeof result === \"object\" && !Buffer.isBuffer(result)) {\n                this.schema = result;\n                return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));\n            } else if (args.options.continueOnError) {\n                this.schema = null; // it's already set to null at line 79, but let's set it again for the sake of readability\n                return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));\n            } else {\n                throw ono_1.ono.syntax(`\"${this.$refs._root$Ref.path || result}\" is not a valid JSON Schema`);\n            }\n        } catch (err) {\n            if (!args.options.continueOnError || !(0, errors_js_1.isHandledError)(err)) {\n                return (0, maybe_js_1.default)(args.callback, Promise.reject(err));\n            }\n            if (this.$refs._$refs[url.stripHash(args.path)]) {\n                this.$refs._$refs[url.stripHash(args.path)].addError(err);\n            }\n            return (0, maybe_js_1.default)(args.callback, Promise.resolve(null));\n        }\n    }\n    static parse() {\n        const parser = new $RefParser();\n        return parser.parse.apply(parser, arguments);\n    }\n    /**\n     * Parses the given JSON schema and resolves any JSON references, including references in\n     * externally-referenced files.\n     *\n     * @param [path] - The file path or URL of the JSON schema\n     * @param [schema] - A JSON schema object. This object will be used instead of reading from `path`.\n     * @param [options] - Options that determine how the schema is parsed and resolved\n     * @param [callback]\n     * - An error-first callback. The second parameter is a {@link $Refs} object containing the resolved JSON references\n     *\n     * @returns\n     * The returned promise resolves with a {@link $Refs} object containing the resolved JSON references\n     */ async resolve() {\n        const args = (0, normalize_args_js_1.default)(arguments);\n        try {\n            await this.parse(args.path, args.schema, args.options);\n            await (0, resolve_external_js_1.default)(this, args.options);\n            finalize(this);\n            return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.$refs));\n        } catch (err) {\n            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));\n        }\n    }\n    static resolve() {\n        const instance = new $RefParser();\n        return instance.resolve.apply(instance, arguments);\n    }\n    static bundle() {\n        const instance = new $RefParser();\n        return instance.bundle.apply(instance, arguments);\n    }\n    async bundle() {\n        const args = (0, normalize_args_js_1.default)(arguments);\n        try {\n            await this.resolve(args.path, args.schema, args.options);\n            (0, bundle_js_1.default)(this, args.options);\n            finalize(this);\n            return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));\n        } catch (err) {\n            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));\n        }\n    }\n    static dereference() {\n        const instance = new $RefParser();\n        return instance.dereference.apply(instance, arguments);\n    }\n    async dereference() {\n        const args = (0, normalize_args_js_1.default)(arguments);\n        try {\n            await this.resolve(args.path, args.schema, args.options);\n            (0, dereference_js_1.default)(this, args.options);\n            finalize(this);\n            return (0, maybe_js_1.default)(args.callback, Promise.resolve(this.schema));\n        } catch (err) {\n            return (0, maybe_js_1.default)(args.callback, Promise.reject(err));\n        }\n    }\n}\nexports.$RefParser = $RefParser;\nexports[\"default\"] = $RefParser;\nfunction finalize(parser) {\n    const errors = errors_js_1.JSONParserErrorGroup.getParserErrors(parser);\n    if (errors.length > 0) {\n        throw new errors_js_1.JSONParserErrorGroup(parser);\n    }\n}\nexports.parse = $RefParser.parse;\nexports.resolve = $RefParser.resolve;\nexports.bundle = $RefParser.bundle;\nexports.dereference = $RefParser.dereference;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/normalize-args.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/normalize-args.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst options_js_1 = __webpack_require__(/*! ./options.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/options.js\");\nexports[\"default\"] = normalizeArgs;\n/**\n * Normalizes the given arguments, accounting for optional args.\n */ function normalizeArgs(_args) {\n    let path, schema, options, callback;\n    const args = Array.prototype.slice.call(_args);\n    if (typeof args[args.length - 1] === \"function\") {\n        // The last parameter is a callback function\n        callback = args.pop();\n    }\n    if (typeof args[0] === \"string\") {\n        // The first parameter is the path\n        path = args[0];\n        if (typeof args[2] === \"object\") {\n            // The second parameter is the schema, and the third parameter is the options\n            schema = args[1];\n            options = args[2];\n        } else {\n            // The second parameter is the options\n            schema = undefined;\n            options = args[1];\n        }\n    } else {\n        // The first parameter is the schema\n        path = \"\";\n        schema = args[0];\n        options = args[1];\n    }\n    options = (0, options_js_1.getNewOptions)(options);\n    return {\n        path,\n        schema,\n        options,\n        callback\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvbm9ybWFsaXplLWFyZ3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsZUFBZUMsbUJBQU9BLENBQUMsa0dBQWM7QUFDM0NILGtCQUFlLEdBQUdLO0FBQ2xCOztDQUVDLEdBQ0QsU0FBU0EsY0FBY0MsS0FBSztJQUN4QixJQUFJQyxNQUFNQyxRQUFRQyxTQUFTQztJQUMzQixNQUFNQyxPQUFPQyxNQUFNQyxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsSUFBSSxDQUFDVDtJQUN4QyxJQUFJLE9BQU9LLElBQUksQ0FBQ0EsS0FBS0ssTUFBTSxHQUFHLEVBQUUsS0FBSyxZQUFZO1FBQzdDLDRDQUE0QztRQUM1Q04sV0FBV0MsS0FBS00sR0FBRztJQUN2QjtJQUNBLElBQUksT0FBT04sSUFBSSxDQUFDLEVBQUUsS0FBSyxVQUFVO1FBQzdCLGtDQUFrQztRQUNsQ0osT0FBT0ksSUFBSSxDQUFDLEVBQUU7UUFDZCxJQUFJLE9BQU9BLElBQUksQ0FBQyxFQUFFLEtBQUssVUFBVTtZQUM3Qiw2RUFBNkU7WUFDN0VILFNBQVNHLElBQUksQ0FBQyxFQUFFO1lBQ2hCRixVQUFVRSxJQUFJLENBQUMsRUFBRTtRQUNyQixPQUNLO1lBQ0Qsc0NBQXNDO1lBQ3RDSCxTQUFTVTtZQUNUVCxVQUFVRSxJQUFJLENBQUMsRUFBRTtRQUNyQjtJQUNKLE9BQ0s7UUFDRCxvQ0FBb0M7UUFDcENKLE9BQU87UUFDUEMsU0FBU0csSUFBSSxDQUFDLEVBQUU7UUFDaEJGLFVBQVVFLElBQUksQ0FBQyxFQUFFO0lBQ3JCO0lBQ0FGLFVBQVUsQ0FBQyxHQUFHUCxhQUFhaUIsYUFBYSxFQUFFVjtJQUMxQyxPQUFPO1FBQ0hGO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvbm9ybWFsaXplLWFyZ3MuanM/YjFiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG9wdGlvbnNfanNfMSA9IHJlcXVpcmUoXCIuL29wdGlvbnMuanNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSBub3JtYWxpemVBcmdzO1xuLyoqXG4gKiBOb3JtYWxpemVzIHRoZSBnaXZlbiBhcmd1bWVudHMsIGFjY291bnRpbmcgZm9yIG9wdGlvbmFsIGFyZ3MuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFyZ3MoX2FyZ3MpIHtcbiAgICBsZXQgcGF0aCwgc2NoZW1hLCBvcHRpb25zLCBjYWxsYmFjaztcbiAgICBjb25zdCBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoX2FyZ3MpO1xuICAgIGlmICh0eXBlb2YgYXJnc1thcmdzLmxlbmd0aCAtIDFdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgLy8gVGhlIGxhc3QgcGFyYW1ldGVyIGlzIGEgY2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgICAgY2FsbGJhY2sgPSBhcmdzLnBvcCgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgcGF0aFxuICAgICAgICBwYXRoID0gYXJnc1swXTtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzJdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAvLyBUaGUgc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUgc2NoZW1hLCBhbmQgdGhlIHRoaXJkIHBhcmFtZXRlciBpcyB0aGUgb3B0aW9uc1xuICAgICAgICAgICAgc2NoZW1hID0gYXJnc1sxXTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmdzWzJdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlIHNlY29uZCBwYXJhbWV0ZXIgaXMgdGhlIG9wdGlvbnNcbiAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBhcmdzWzFdO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIHRoZSBzY2hlbWFcbiAgICAgICAgcGF0aCA9IFwiXCI7XG4gICAgICAgIHNjaGVtYSA9IGFyZ3NbMF07XG4gICAgICAgIG9wdGlvbnMgPSBhcmdzWzFdO1xuICAgIH1cbiAgICBvcHRpb25zID0gKDAsIG9wdGlvbnNfanNfMS5nZXROZXdPcHRpb25zKShvcHRpb25zKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBzY2hlbWEsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGNhbGxiYWNrLFxuICAgIH07XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJvcHRpb25zX2pzXzEiLCJyZXF1aXJlIiwiZGVmYXVsdCIsIm5vcm1hbGl6ZUFyZ3MiLCJfYXJncyIsInBhdGgiLCJzY2hlbWEiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJhcmdzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJsZW5ndGgiLCJwb3AiLCJ1bmRlZmluZWQiLCJnZXROZXdPcHRpb25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/normalize-args.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/options.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/options.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getNewOptions = void 0;\nconst json_js_1 = __importDefault(__webpack_require__(/*! ./parsers/json.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/json.js\"));\nconst yaml_js_1 = __importDefault(__webpack_require__(/*! ./parsers/yaml.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/yaml.js\"));\nconst text_js_1 = __importDefault(__webpack_require__(/*! ./parsers/text.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/text.js\"));\nconst binary_js_1 = __importDefault(__webpack_require__(/*! ./parsers/binary.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/binary.js\"));\nconst file_js_1 = __importDefault(__webpack_require__(/*! ./resolvers/file.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/file.js\"));\nconst http_js_1 = __importDefault(__webpack_require__(/*! ./resolvers/http.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/http.js\"));\nconst lodash_clonedeep_1 = __importDefault(__webpack_require__(/*! lodash.clonedeep */ \"(ssr)/./node_modules/lodash.clonedeep/index.js\"));\nconst getDefaults = ()=>{\n    const defaults = {\n        /**\n         * Determines how different types of files will be parsed.\n         *\n         * You can add additional parsers of your own, replace an existing one with\n         * your own implementation, or disable any parser by setting it to false.\n         */ parse: {\n            json: json_js_1.default,\n            yaml: yaml_js_1.default,\n            text: text_js_1.default,\n            binary: binary_js_1.default\n        },\n        /**\n         * Determines how JSON References will be resolved.\n         *\n         * You can add additional resolvers of your own, replace an existing one with\n         * your own implementation, or disable any resolver by setting it to false.\n         */ resolve: {\n            file: file_js_1.default,\n            http: http_js_1.default,\n            /**\n             * Determines whether external $ref pointers will be resolved.\n             * If this option is disabled, then none of above resolvers will be called.\n             * Instead, external $ref pointers will simply be ignored.\n             *\n             * @type {boolean}\n             */ external: true\n        },\n        /**\n         * By default, JSON Schema $Ref Parser throws the first error it encounters. Setting `continueOnError` to `true`\n         * causes it to keep processing as much as possible and then throw a single error that contains all errors\n         * that were encountered.\n         */ continueOnError: false,\n        /**\n         * Determines the types of JSON references that are allowed.\n         */ dereference: {\n            /**\n             * Dereference circular (recursive) JSON references?\n             * If false, then a {@link ReferenceError} will be thrown if a circular reference is found.\n             * If \"ignore\", then circular references will not be dereferenced.\n             *\n             * @type {boolean|string}\n             */ circular: true,\n            /**\n             * A function, called for each path, which can return true to stop this path and all\n             * subpaths from being dereferenced further. This is useful in schemas where some\n             * subpaths contain literal $ref keys that should not be dereferenced.\n             *\n             * @type {function}\n             */ excludedPathMatcher: ()=>false,\n            referenceResolution: \"relative\"\n        }\n    };\n    return (0, lodash_clonedeep_1.default)(defaults);\n};\nconst getNewOptions = (options)=>{\n    const newOptions = getDefaults();\n    if (options) {\n        merge(newOptions, options);\n    }\n    return newOptions;\n};\nexports.getNewOptions = getNewOptions;\n/**\n * Merges the properties of the source object into the target object.\n *\n * @param target - The object that we're populating\n * @param source - The options that are being merged\n * @returns\n */ function merge(target, source) {\n    if (isMergeable(source)) {\n        const keys = Object.keys(source);\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i];\n            const sourceSetting = source[key];\n            const targetSetting = target[key];\n            if (isMergeable(sourceSetting)) {\n                // It's a nested object, so merge it recursively\n                target[key] = merge(targetSetting || {}, sourceSetting);\n            } else if (sourceSetting !== undefined) {\n                // It's a scalar value, function, or array. No merging necessary. Just overwrite the target value.\n                target[key] = sourceSetting;\n            }\n        }\n    }\n    return target;\n}\n/**\n * Determines whether the given value can be merged,\n * or if it is a scalar value that should just override the target value.\n *\n * @param val\n * @returns\n */ function isMergeable(val) {\n    return val && typeof val === \"object\" && !Array.isArray(val) && !(val instanceof RegExp) && !(val instanceof Date);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQscUJBQXFCLEdBQUcsS0FBSztBQUM3QixNQUFNRyxZQUFZUixnQkFBZ0JTLG1CQUFPQSxDQUFDLDRHQUFtQjtBQUM3RCxNQUFNQyxZQUFZVixnQkFBZ0JTLG1CQUFPQSxDQUFDLDRHQUFtQjtBQUM3RCxNQUFNRSxZQUFZWCxnQkFBZ0JTLG1CQUFPQSxDQUFDLDRHQUFtQjtBQUM3RCxNQUFNRyxjQUFjWixnQkFBZ0JTLG1CQUFPQSxDQUFDLGdIQUFxQjtBQUNqRSxNQUFNSSxZQUFZYixnQkFBZ0JTLG1CQUFPQSxDQUFDLGdIQUFxQjtBQUMvRCxNQUFNSyxZQUFZZCxnQkFBZ0JTLG1CQUFPQSxDQUFDLGdIQUFxQjtBQUMvRCxNQUFNTSxxQkFBcUJmLGdCQUFnQlMsbUJBQU9BLENBQUMsd0VBQWtCO0FBQ3JFLE1BQU1PLGNBQWM7SUFDaEIsTUFBTUMsV0FBVztRQUNiOzs7OztTQUtDLEdBQ0RDLE9BQU87WUFDSEMsTUFBTVgsVUFBVVksT0FBTztZQUN2QkMsTUFBTVgsVUFBVVUsT0FBTztZQUN2QkUsTUFBTVgsVUFBVVMsT0FBTztZQUN2QkcsUUFBUVgsWUFBWVEsT0FBTztRQUMvQjtRQUNBOzs7OztTQUtDLEdBQ0RJLFNBQVM7WUFDTEMsTUFBTVosVUFBVU8sT0FBTztZQUN2Qk0sTUFBTVosVUFBVU0sT0FBTztZQUN2Qjs7Ozs7O2FBTUMsR0FDRE8sVUFBVTtRQUNkO1FBQ0E7Ozs7U0FJQyxHQUNEQyxpQkFBaUI7UUFDakI7O1NBRUMsR0FDREMsYUFBYTtZQUNUOzs7Ozs7YUFNQyxHQUNEQyxVQUFVO1lBQ1Y7Ozs7OzthQU1DLEdBQ0RDLHFCQUFxQixJQUFNO1lBQzNCQyxxQkFBcUI7UUFDekI7SUFDSjtJQUNBLE9BQU8sQ0FBQyxHQUFHakIsbUJBQW1CSyxPQUFPLEVBQUVIO0FBQzNDO0FBQ0EsTUFBTVYsZ0JBQWdCLENBQUMwQjtJQUNuQixNQUFNQyxhQUFhbEI7SUFDbkIsSUFBSWlCLFNBQVM7UUFDVEUsTUFBTUQsWUFBWUQ7SUFDdEI7SUFDQSxPQUFPQztBQUNYO0FBQ0E3QixxQkFBcUIsR0FBR0U7QUFDeEI7Ozs7OztDQU1DLEdBQ0QsU0FBUzRCLE1BQU1DLE1BQU0sRUFBRUMsTUFBTTtJQUN6QixJQUFJQyxZQUFZRCxTQUFTO1FBQ3JCLE1BQU1FLE9BQU9wQyxPQUFPb0MsSUFBSSxDQUFDRjtRQUN6QixJQUFLLElBQUlHLElBQUksR0FBR0EsSUFBSUQsS0FBS0UsTUFBTSxFQUFFRCxJQUFLO1lBQ2xDLE1BQU1FLE1BQU1ILElBQUksQ0FBQ0MsRUFBRTtZQUNuQixNQUFNRyxnQkFBZ0JOLE1BQU0sQ0FBQ0ssSUFBSTtZQUNqQyxNQUFNRSxnQkFBZ0JSLE1BQU0sQ0FBQ00sSUFBSTtZQUNqQyxJQUFJSixZQUFZSyxnQkFBZ0I7Z0JBQzVCLGdEQUFnRDtnQkFDaERQLE1BQU0sQ0FBQ00sSUFBSSxHQUFHUCxNQUFNUyxpQkFBaUIsQ0FBQyxHQUFHRDtZQUM3QyxPQUNLLElBQUlBLGtCQUFrQkUsV0FBVztnQkFDbEMsa0dBQWtHO2dCQUNsR1QsTUFBTSxDQUFDTSxJQUFJLEdBQUdDO1lBQ2xCO1FBQ0o7SUFDSjtJQUNBLE9BQU9QO0FBQ1g7QUFDQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRSxZQUFZUSxHQUFHO0lBQ3BCLE9BQU9BLE9BQU8sT0FBT0EsUUFBUSxZQUFZLENBQUNDLE1BQU1DLE9BQU8sQ0FBQ0YsUUFBUSxDQUFFQSxDQUFBQSxlQUFlRyxNQUFLLEtBQU0sQ0FBRUgsQ0FBQUEsZUFBZUksSUFBRztBQUNwSCIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvb3B0aW9ucy5qcz9hZWM3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXROZXdPcHRpb25zID0gdm9pZCAwO1xuY29uc3QganNvbl9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3BhcnNlcnMvanNvbi5qc1wiKSk7XG5jb25zdCB5YW1sX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcGFyc2Vycy95YW1sLmpzXCIpKTtcbmNvbnN0IHRleHRfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9wYXJzZXJzL3RleHQuanNcIikpO1xuY29uc3QgYmluYXJ5X2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcGFyc2Vycy9iaW5hcnkuanNcIikpO1xuY29uc3QgZmlsZV9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Jlc29sdmVycy9maWxlLmpzXCIpKTtcbmNvbnN0IGh0dHBfanNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9yZXNvbHZlcnMvaHR0cC5qc1wiKSk7XG5jb25zdCBsb2Rhc2hfY2xvbmVkZWVwXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxvZGFzaC5jbG9uZWRlZXBcIikpO1xuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZGVmYXVsdHMgPSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRlcm1pbmVzIGhvdyBkaWZmZXJlbnQgdHlwZXMgb2YgZmlsZXMgd2lsbCBiZSBwYXJzZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFlvdSBjYW4gYWRkIGFkZGl0aW9uYWwgcGFyc2VycyBvZiB5b3VyIG93biwgcmVwbGFjZSBhbiBleGlzdGluZyBvbmUgd2l0aFxuICAgICAgICAgKiB5b3VyIG93biBpbXBsZW1lbnRhdGlvbiwgb3IgZGlzYWJsZSBhbnkgcGFyc2VyIGJ5IHNldHRpbmcgaXQgdG8gZmFsc2UuXG4gICAgICAgICAqL1xuICAgICAgICBwYXJzZToge1xuICAgICAgICAgICAganNvbjoganNvbl9qc18xLmRlZmF1bHQsXG4gICAgICAgICAgICB5YW1sOiB5YW1sX2pzXzEuZGVmYXVsdCxcbiAgICAgICAgICAgIHRleHQ6IHRleHRfanNfMS5kZWZhdWx0LFxuICAgICAgICAgICAgYmluYXJ5OiBiaW5hcnlfanNfMS5kZWZhdWx0LFxuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lcyBob3cgSlNPTiBSZWZlcmVuY2VzIHdpbGwgYmUgcmVzb2x2ZWQuXG4gICAgICAgICAqXG4gICAgICAgICAqIFlvdSBjYW4gYWRkIGFkZGl0aW9uYWwgcmVzb2x2ZXJzIG9mIHlvdXIgb3duLCByZXBsYWNlIGFuIGV4aXN0aW5nIG9uZSB3aXRoXG4gICAgICAgICAqIHlvdXIgb3duIGltcGxlbWVudGF0aW9uLCBvciBkaXNhYmxlIGFueSByZXNvbHZlciBieSBzZXR0aW5nIGl0IHRvIGZhbHNlLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVzb2x2ZToge1xuICAgICAgICAgICAgZmlsZTogZmlsZV9qc18xLmRlZmF1bHQsXG4gICAgICAgICAgICBodHRwOiBodHRwX2pzXzEuZGVmYXVsdCxcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIGV4dGVybmFsICRyZWYgcG9pbnRlcnMgd2lsbCBiZSByZXNvbHZlZC5cbiAgICAgICAgICAgICAqIElmIHRoaXMgb3B0aW9uIGlzIGRpc2FibGVkLCB0aGVuIG5vbmUgb2YgYWJvdmUgcmVzb2x2ZXJzIHdpbGwgYmUgY2FsbGVkLlxuICAgICAgICAgICAgICogSW5zdGVhZCwgZXh0ZXJuYWwgJHJlZiBwb2ludGVycyB3aWxsIHNpbXBseSBiZSBpZ25vcmVkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBleHRlcm5hbDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJ5IGRlZmF1bHQsIEpTT04gU2NoZW1hICRSZWYgUGFyc2VyIHRocm93cyB0aGUgZmlyc3QgZXJyb3IgaXQgZW5jb3VudGVycy4gU2V0dGluZyBgY29udGludWVPbkVycm9yYCB0byBgdHJ1ZWBcbiAgICAgICAgICogY2F1c2VzIGl0IHRvIGtlZXAgcHJvY2Vzc2luZyBhcyBtdWNoIGFzIHBvc3NpYmxlIGFuZCB0aGVuIHRocm93IGEgc2luZ2xlIGVycm9yIHRoYXQgY29udGFpbnMgYWxsIGVycm9yc1xuICAgICAgICAgKiB0aGF0IHdlcmUgZW5jb3VudGVyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBjb250aW51ZU9uRXJyb3I6IGZhbHNlLFxuICAgICAgICAvKipcbiAgICAgICAgICogRGV0ZXJtaW5lcyB0aGUgdHlwZXMgb2YgSlNPTiByZWZlcmVuY2VzIHRoYXQgYXJlIGFsbG93ZWQuXG4gICAgICAgICAqL1xuICAgICAgICBkZXJlZmVyZW5jZToge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZXJlZmVyZW5jZSBjaXJjdWxhciAocmVjdXJzaXZlKSBKU09OIHJlZmVyZW5jZXM/XG4gICAgICAgICAgICAgKiBJZiBmYWxzZSwgdGhlbiBhIHtAbGluayBSZWZlcmVuY2VFcnJvcn0gd2lsbCBiZSB0aHJvd24gaWYgYSBjaXJjdWxhciByZWZlcmVuY2UgaXMgZm91bmQuXG4gICAgICAgICAgICAgKiBJZiBcImlnbm9yZVwiLCB0aGVuIGNpcmN1bGFyIHJlZmVyZW5jZXMgd2lsbCBub3QgYmUgZGVyZWZlcmVuY2VkLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEB0eXBlIHtib29sZWFufHN0cmluZ31cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgY2lyY3VsYXI6IHRydWUsXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgZnVuY3Rpb24sIGNhbGxlZCBmb3IgZWFjaCBwYXRoLCB3aGljaCBjYW4gcmV0dXJuIHRydWUgdG8gc3RvcCB0aGlzIHBhdGggYW5kIGFsbFxuICAgICAgICAgICAgICogc3VicGF0aHMgZnJvbSBiZWluZyBkZXJlZmVyZW5jZWQgZnVydGhlci4gVGhpcyBpcyB1c2VmdWwgaW4gc2NoZW1hcyB3aGVyZSBzb21lXG4gICAgICAgICAgICAgKiBzdWJwYXRocyBjb250YWluIGxpdGVyYWwgJHJlZiBrZXlzIHRoYXQgc2hvdWxkIG5vdCBiZSBkZXJlZmVyZW5jZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBleGNsdWRlZFBhdGhNYXRjaGVyOiAoKSA9PiBmYWxzZSxcbiAgICAgICAgICAgIHJlZmVyZW5jZVJlc29sdXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIHJldHVybiAoMCwgbG9kYXNoX2Nsb25lZGVlcF8xLmRlZmF1bHQpKGRlZmF1bHRzKTtcbn07XG5jb25zdCBnZXROZXdPcHRpb25zID0gKG9wdGlvbnMpID0+IHtcbiAgICBjb25zdCBuZXdPcHRpb25zID0gZ2V0RGVmYXVsdHMoKTtcbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBtZXJnZShuZXdPcHRpb25zLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld09wdGlvbnM7XG59O1xuZXhwb3J0cy5nZXROZXdPcHRpb25zID0gZ2V0TmV3T3B0aW9ucztcbi8qKlxuICogTWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzb3VyY2Ugb2JqZWN0IGludG8gdGhlIHRhcmdldCBvYmplY3QuXG4gKlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSBvYmplY3QgdGhhdCB3ZSdyZSBwb3B1bGF0aW5nXG4gKiBAcGFyYW0gc291cmNlIC0gVGhlIG9wdGlvbnMgdGhhdCBhcmUgYmVpbmcgbWVyZ2VkXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBtZXJnZSh0YXJnZXQsIHNvdXJjZSkge1xuICAgIGlmIChpc01lcmdlYWJsZShzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VTZXR0aW5nID0gc291cmNlW2tleV07XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRTZXR0aW5nID0gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICBpZiAoaXNNZXJnZWFibGUoc291cmNlU2V0dGluZykpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIGEgbmVzdGVkIG9iamVjdCwgc28gbWVyZ2UgaXQgcmVjdXJzaXZlbHlcbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IG1lcmdlKHRhcmdldFNldHRpbmcgfHwge30sIHNvdXJjZVNldHRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlU2V0dGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhIHNjYWxhciB2YWx1ZSwgZnVuY3Rpb24sIG9yIGFycmF5LiBObyBtZXJnaW5nIG5lY2Vzc2FyeS4gSnVzdCBvdmVyd3JpdGUgdGhlIHRhcmdldCB2YWx1ZS5cbiAgICAgICAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVNldHRpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBjYW4gYmUgbWVyZ2VkLFxuICogb3IgaWYgaXQgaXMgYSBzY2FsYXIgdmFsdWUgdGhhdCBzaG91bGQganVzdCBvdmVycmlkZSB0aGUgdGFyZ2V0IHZhbHVlLlxuICpcbiAqIEBwYXJhbSB2YWxcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGlzTWVyZ2VhYmxlKHZhbCkge1xuICAgIHJldHVybiB2YWwgJiYgdHlwZW9mIHZhbCA9PT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheSh2YWwpICYmICEodmFsIGluc3RhbmNlb2YgUmVnRXhwKSAmJiAhKHZhbCBpbnN0YW5jZW9mIERhdGUpO1xufVxuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldE5ld09wdGlvbnMiLCJqc29uX2pzXzEiLCJyZXF1aXJlIiwieWFtbF9qc18xIiwidGV4dF9qc18xIiwiYmluYXJ5X2pzXzEiLCJmaWxlX2pzXzEiLCJodHRwX2pzXzEiLCJsb2Rhc2hfY2xvbmVkZWVwXzEiLCJnZXREZWZhdWx0cyIsImRlZmF1bHRzIiwicGFyc2UiLCJqc29uIiwiZGVmYXVsdCIsInlhbWwiLCJ0ZXh0IiwiYmluYXJ5IiwicmVzb2x2ZSIsImZpbGUiLCJodHRwIiwiZXh0ZXJuYWwiLCJjb250aW51ZU9uRXJyb3IiLCJkZXJlZmVyZW5jZSIsImNpcmN1bGFyIiwiZXhjbHVkZWRQYXRoTWF0Y2hlciIsInJlZmVyZW5jZVJlc29sdXRpb24iLCJvcHRpb25zIiwibmV3T3B0aW9ucyIsIm1lcmdlIiwidGFyZ2V0Iiwic291cmNlIiwiaXNNZXJnZWFibGUiLCJrZXlzIiwiaSIsImxlbmd0aCIsImtleSIsInNvdXJjZVNldHRpbmciLCJ0YXJnZXRTZXR0aW5nIiwidW5kZWZpbmVkIiwidmFsIiwiQXJyYXkiLCJpc0FycmF5IiwiUmVnRXhwIiwiRGF0ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parse.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parse.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst plugins = __importStar(__webpack_require__(/*! ./util/plugins.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/plugins.js\"));\nconst errors_js_1 = __webpack_require__(/*! ./util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nexports[\"default\"] = parse;\n/**\n * Reads and parses the specified file path or URL.\n */ async function parse(path, $refs, options) {\n    // Remove the URL fragment, if any\n    path = url.stripHash(path);\n    // Add a new $Ref for this file, even though we don't have the value yet.\n    // This ensures that we don't simultaneously read & parse the same file multiple times\n    const $ref = $refs._add(path);\n    // This \"file object\" will be passed to all resolvers and parsers.\n    const file = {\n        url: path,\n        extension: url.getExtension(path)\n    };\n    // Read the file and then parse the data\n    try {\n        const resolver = await readFile(file, options, $refs);\n        $ref.pathType = resolver.plugin.name;\n        file.data = resolver.result;\n        const parser = await parseFile(file, options, $refs);\n        $ref.value = parser.result;\n        return parser.result;\n    } catch (err) {\n        if ((0, errors_js_1.isHandledError)(err)) {\n            $ref.value = err;\n        }\n        throw err;\n    }\n}\n/**\n * Reads the given file, using the configured resolver plugins\n *\n * @param file           - An object containing information about the referenced file\n * @param file.url       - The full URL of the referenced file\n * @param file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param options\n *\n * @returns\n * The promise resolves with the raw file contents and the resolver that was used.\n */ async function readFile(file, options, $refs) {\n    // console.log('Reading %s', file.url);\n    // Find the resolvers that can read this file\n    let resolvers = plugins.all(options.resolve);\n    resolvers = plugins.filter(resolvers, \"canRead\", file);\n    // Run the resolvers, in order, until one of them succeeds\n    plugins.sort(resolvers);\n    try {\n        const data = await plugins.run(resolvers, \"read\", file, $refs);\n        return data;\n    } catch (err) {\n        if (!err && options.continueOnError) {\n            // No resolver could be matched\n            throw new errors_js_1.UnmatchedResolverError(file.url);\n        } else if (!err || !(\"error\" in err)) {\n            // Throw a generic, friendly error.\n            throw ono_1.ono.syntax(`Unable to resolve $ref pointer \"${file.url}\"`);\n        } else if (err.error instanceof errors_js_1.ResolverError) {\n            throw err.error;\n        } else {\n            throw new errors_js_1.ResolverError(err, file.url);\n        }\n    }\n}\n/**\n * Parses the given file's contents, using the configured parser plugins.\n *\n * @param file           - An object containing information about the referenced file\n * @param file.url       - The full URL of the referenced file\n * @param file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n * @param file.data      - The file contents. This will be whatever data type was returned by the resolver\n * @param options\n *\n * @returns\n * The promise resolves with the parsed file contents and the parser that was used.\n */ async function parseFile(file, options, $refs) {\n    // console.log('Parsing %s', file.url);\n    // Find the parsers that can read this file type.\n    // If none of the parsers are an exact match for this file, then we'll try ALL of them.\n    // This handles situations where the file IS a supported type, just with an unknown extension.\n    const allParsers = plugins.all(options.parse);\n    const filteredParsers = plugins.filter(allParsers, \"canParse\", file);\n    const parsers = filteredParsers.length > 0 ? filteredParsers : allParsers;\n    // Run the parsers, in order, until one of them succeeds\n    plugins.sort(parsers);\n    try {\n        const parser = await plugins.run(parsers, \"parse\", file, $refs);\n        if (!parser.plugin.allowEmpty && isEmpty(parser.result)) {\n            throw ono_1.ono.syntax(`Error parsing \"${file.url}\" as ${parser.plugin.name}. \\nParsed value is empty`);\n        } else {\n            return parser;\n        }\n    } catch (err) {\n        if (!err && options.continueOnError) {\n            // No resolver could be matched\n            throw new errors_js_1.UnmatchedParserError(file.url);\n        } else if (err && err.message && err.message.startsWith(\"Error parsing\")) {\n            throw err;\n        } else if (!err || !(\"error\" in err)) {\n            throw ono_1.ono.syntax(`Unable to parse ${file.url}`);\n        } else if (err.error instanceof errors_js_1.ParserError) {\n            throw err.error;\n        } else {\n            throw new errors_js_1.ParserError(err.error.message, file.url);\n        }\n    }\n}\n/**\n * Determines whether the parsed value is \"empty\".\n *\n * @param value\n * @returns\n */ function isEmpty(value) {\n    return value === undefined || typeof value === \"object\" && Object.keys(value).length === 0 || typeof value === \"string\" && value.trim().length === 0 || Buffer.isBuffer(value) && value.length === 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/binary.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/binary.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst BINARY_REGEXP = /\\.(jpeg|jpg|gif|png|bmp|ico)$/i;\nexports[\"default\"] = {\n    /**\n     * The order that this parser will run, in relation to other parsers.\n     */ order: 400,\n    /**\n     * Whether to allow \"empty\" files (zero bytes).\n     */ allowEmpty: true,\n    /**\n     * Determines whether this parser can parse a given file reference.\n     * Parsers that return true will be tried, in order, until one successfully parses the file.\n     * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case\n     * every parser will be tried.\n     */ canParse (file) {\n        // Use this parser if the file is a Buffer, and has a known binary extension\n        return Buffer.isBuffer(file.data) && BINARY_REGEXP.test(file.url);\n    },\n    /**\n     * Parses the given data as a Buffer (byte array).\n     */ parse (file) {\n        if (Buffer.isBuffer(file.data)) {\n            return file.data;\n        } else {\n            // This will reject if data is anything other than a string or typed array\n            return Buffer.from(file.data);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcGFyc2Vycy9iaW5hcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsZ0JBQWdCO0FBQ3RCRixrQkFBZSxHQUFHO0lBQ2Q7O0tBRUMsR0FDREksT0FBTztJQUNQOztLQUVDLEdBQ0RDLFlBQVk7SUFDWjs7Ozs7S0FLQyxHQUNEQyxVQUFTQyxJQUFJO1FBQ1QsNEVBQTRFO1FBQzVFLE9BQU9DLE9BQU9DLFFBQVEsQ0FBQ0YsS0FBS0csSUFBSSxLQUFLUixjQUFjUyxJQUFJLENBQUNKLEtBQUtLLEdBQUc7SUFDcEU7SUFDQTs7S0FFQyxHQUNEQyxPQUFNTixJQUFJO1FBQ04sSUFBSUMsT0FBT0MsUUFBUSxDQUFDRixLQUFLRyxJQUFJLEdBQUc7WUFDNUIsT0FBT0gsS0FBS0csSUFBSTtRQUNwQixPQUNLO1lBQ0QsMEVBQTBFO1lBQzFFLE9BQU9GLE9BQU9NLElBQUksQ0FBQ1AsS0FBS0csSUFBSTtRQUNoQztJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL0BhcGlkZXZ0b29scy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2Rpc3QvbGliL3BhcnNlcnMvYmluYXJ5LmpzPzgwYjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBCSU5BUllfUkVHRVhQID0gL1xcLihqcGVnfGpwZ3xnaWZ8cG5nfGJtcHxpY28pJC9pO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcGFyc2VyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciBwYXJzZXJzLlxuICAgICAqL1xuICAgIG9yZGVyOiA0MDAsXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBhbGxvdyBcImVtcHR5XCIgZmlsZXMgKHplcm8gYnl0ZXMpLlxuICAgICAqL1xuICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgcGFyc2VyIGNhbiBwYXJzZSBhIGdpdmVuIGZpbGUgcmVmZXJlbmNlLlxuICAgICAqIFBhcnNlcnMgdGhhdCByZXR1cm4gdHJ1ZSB3aWxsIGJlIHRyaWVkLCBpbiBvcmRlciwgdW50aWwgb25lIHN1Y2Nlc3NmdWxseSBwYXJzZXMgdGhlIGZpbGUuXG4gICAgICogUGFyc2VycyB0aGF0IHJldHVybiBmYWxzZSB3aWxsIGJlIHNraXBwZWQsIFVOTEVTUyBhbGwgcGFyc2VycyByZXR1cm5lZCBmYWxzZSwgaW4gd2hpY2ggY2FzZVxuICAgICAqIGV2ZXJ5IHBhcnNlciB3aWxsIGJlIHRyaWVkLlxuICAgICAqL1xuICAgIGNhblBhcnNlKGZpbGUpIHtcbiAgICAgICAgLy8gVXNlIHRoaXMgcGFyc2VyIGlmIHRoZSBmaWxlIGlzIGEgQnVmZmVyLCBhbmQgaGFzIGEga25vd24gYmluYXJ5IGV4dGVuc2lvblxuICAgICAgICByZXR1cm4gQnVmZmVyLmlzQnVmZmVyKGZpbGUuZGF0YSkgJiYgQklOQVJZX1JFR0VYUC50ZXN0KGZpbGUudXJsKTtcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZGF0YSBhcyBhIEJ1ZmZlciAoYnl0ZSBhcnJheSkuXG4gICAgICovXG4gICAgcGFyc2UoZmlsZSkge1xuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGZpbGUuZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxlLmRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgcmVqZWN0IGlmIGRhdGEgaXMgYW55dGhpbmcgb3RoZXIgdGhhbiBhIHN0cmluZyBvciB0eXBlZCBhcnJheVxuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGZpbGUuZGF0YSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkJJTkFSWV9SRUdFWFAiLCJkZWZhdWx0Iiwib3JkZXIiLCJhbGxvd0VtcHR5IiwiY2FuUGFyc2UiLCJmaWxlIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJkYXRhIiwidGVzdCIsInVybCIsInBhcnNlIiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/binary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/json.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/json.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nexports[\"default\"] = {\n    /**\n     * The order that this parser will run, in relation to other parsers.\n     */ order: 100,\n    /**\n     * Whether to allow \"empty\" files. This includes zero-byte files, as well as empty JSON objects.\n     */ allowEmpty: true,\n    /**\n     * Determines whether this parser can parse a given file reference.\n     * Parsers that match will be tried, in order, until one successfully parses the file.\n     * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case\n     * every parser will be tried.\n     */ canParse: \".json\",\n    /**\n     * Parses the given file as JSON\n     */ async parse (file) {\n        let data = file.data;\n        if (Buffer.isBuffer(data)) {\n            data = data.toString();\n        }\n        if (typeof data === \"string\") {\n            if (data.trim().length === 0) {\n                return; // This mirrors the YAML behavior\n            } else {\n                try {\n                    return JSON.parse(data);\n                } catch (e) {\n                    throw new errors_js_1.ParserError(e.message, file.url);\n                }\n            }\n        } else {\n            // data is already a JavaScript value (object, array, number, null, NaN, etc.)\n            return data;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcGFyc2Vycy9qc29uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGNBQWNDLG1CQUFPQSxDQUFDLDJHQUFtQjtBQUMvQ0gsa0JBQWUsR0FBRztJQUNkOztLQUVDLEdBQ0RLLE9BQU87SUFDUDs7S0FFQyxHQUNEQyxZQUFZO0lBQ1o7Ozs7O0tBS0MsR0FDREMsVUFBVTtJQUNWOztLQUVDLEdBQ0QsTUFBTUMsT0FBTUMsSUFBSTtRQUNaLElBQUlDLE9BQU9ELEtBQUtDLElBQUk7UUFDcEIsSUFBSUMsT0FBT0MsUUFBUSxDQUFDRixPQUFPO1lBQ3ZCQSxPQUFPQSxLQUFLRyxRQUFRO1FBQ3hCO1FBQ0EsSUFBSSxPQUFPSCxTQUFTLFVBQVU7WUFDMUIsSUFBSUEsS0FBS0ksSUFBSSxHQUFHQyxNQUFNLEtBQUssR0FBRztnQkFDMUIsUUFBUSxpQ0FBaUM7WUFDN0MsT0FDSztnQkFDRCxJQUFJO29CQUNBLE9BQU9DLEtBQUtSLEtBQUssQ0FBQ0U7Z0JBQ3RCLEVBQ0EsT0FBT08sR0FBRztvQkFDTixNQUFNLElBQUlmLFlBQVlnQixXQUFXLENBQUNELEVBQUVFLE9BQU8sRUFBRVYsS0FBS1csR0FBRztnQkFDekQ7WUFDSjtRQUNKLE9BQ0s7WUFDRCw4RUFBOEU7WUFDOUUsT0FBT1Y7UUFDWDtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL0BhcGlkZXZ0b29scy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2Rpc3QvbGliL3BhcnNlcnMvanNvbi5qcz9mYzgxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZXJyb3JzX2pzXzEgPSByZXF1aXJlKFwiLi4vdXRpbC9lcnJvcnMuanNcIik7XG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gICAgLyoqXG4gICAgICogVGhlIG9yZGVyIHRoYXQgdGhpcyBwYXJzZXIgd2lsbCBydW4sIGluIHJlbGF0aW9uIHRvIG90aGVyIHBhcnNlcnMuXG4gICAgICovXG4gICAgb3JkZXI6IDEwMCxcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGFsbG93IFwiZW1wdHlcIiBmaWxlcy4gVGhpcyBpbmNsdWRlcyB6ZXJvLWJ5dGUgZmlsZXMsIGFzIHdlbGwgYXMgZW1wdHkgSlNPTiBvYmplY3RzLlxuICAgICAqL1xuICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoaXMgcGFyc2VyIGNhbiBwYXJzZSBhIGdpdmVuIGZpbGUgcmVmZXJlbmNlLlxuICAgICAqIFBhcnNlcnMgdGhhdCBtYXRjaCB3aWxsIGJlIHRyaWVkLCBpbiBvcmRlciwgdW50aWwgb25lIHN1Y2Nlc3NmdWxseSBwYXJzZXMgdGhlIGZpbGUuXG4gICAgICogUGFyc2VycyB0aGF0IGRvbid0IG1hdGNoIHdpbGwgYmUgc2tpcHBlZCwgVU5MRVNTIG5vbmUgb2YgdGhlIHBhcnNlcnMgbWF0Y2gsIGluIHdoaWNoIGNhc2VcbiAgICAgKiBldmVyeSBwYXJzZXIgd2lsbCBiZSB0cmllZC5cbiAgICAgKi9cbiAgICBjYW5QYXJzZTogXCIuanNvblwiLFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZmlsZSBhcyBKU09OXG4gICAgICovXG4gICAgYXN5bmMgcGFyc2UoZmlsZSkge1xuICAgICAgICBsZXQgZGF0YSA9IGZpbGUuZGF0YTtcbiAgICAgICAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihkYXRhKSkge1xuICAgICAgICAgICAgZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIFRoaXMgbWlycm9ycyB0aGUgWUFNTCBiZWhhdmlvclxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfanNfMS5QYXJzZXJFcnJvcihlLm1lc3NhZ2UsIGZpbGUudXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBkYXRhIGlzIGFscmVhZHkgYSBKYXZhU2NyaXB0IHZhbHVlIChvYmplY3QsIGFycmF5LCBudW1iZXIsIG51bGwsIE5hTiwgZXRjLilcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9XG4gICAgfSxcbn07XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlcnJvcnNfanNfMSIsInJlcXVpcmUiLCJkZWZhdWx0Iiwib3JkZXIiLCJhbGxvd0VtcHR5IiwiY2FuUGFyc2UiLCJwYXJzZSIsImZpbGUiLCJkYXRhIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJ0b1N0cmluZyIsInRyaW0iLCJsZW5ndGgiLCJKU09OIiwiZSIsIlBhcnNlckVycm9yIiwibWVzc2FnZSIsInVybCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/text.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/text.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nconst TEXT_REGEXP = /\\.(txt|htm|html|md|xml|js|min|map|css|scss|less|svg)$/i;\nexports[\"default\"] = {\n    /**\n     * The order that this parser will run, in relation to other parsers.\n     */ order: 300,\n    /**\n     * Whether to allow \"empty\" files (zero bytes).\n     */ allowEmpty: true,\n    /**\n     * The encoding that the text is expected to be in.\n     */ encoding: \"utf8\",\n    /**\n     * Determines whether this parser can parse a given file reference.\n     * Parsers that return true will be tried, in order, until one successfully parses the file.\n     * Parsers that return false will be skipped, UNLESS all parsers returned false, in which case\n     * every parser will be tried.\n     */ canParse (file) {\n        // Use this parser if the file is a string or Buffer, and has a known text-based extension\n        return (typeof file.data === \"string\" || Buffer.isBuffer(file.data)) && TEXT_REGEXP.test(file.url);\n    },\n    /**\n     * Parses the given file as text\n     */ parse (file) {\n        if (typeof file.data === \"string\") {\n            return file.data;\n        } else if (Buffer.isBuffer(file.data)) {\n            return file.data.toString(this.encoding);\n        } else {\n            throw new errors_js_1.ParserError(\"data is not text\", file.url);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcGFyc2Vycy90ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGNBQWNDLG1CQUFPQSxDQUFDLDJHQUFtQjtBQUMvQyxNQUFNQyxjQUFjO0FBQ3BCSixrQkFBZSxHQUFHO0lBQ2Q7O0tBRUMsR0FDRE0sT0FBTztJQUNQOztLQUVDLEdBQ0RDLFlBQVk7SUFDWjs7S0FFQyxHQUNEQyxVQUFVO0lBQ1Y7Ozs7O0tBS0MsR0FDREMsVUFBU0MsSUFBSTtRQUNULDBGQUEwRjtRQUMxRixPQUFPLENBQUMsT0FBT0EsS0FBS0MsSUFBSSxLQUFLLFlBQVlDLE9BQU9DLFFBQVEsQ0FBQ0gsS0FBS0MsSUFBSSxNQUFNUCxZQUFZVSxJQUFJLENBQUNKLEtBQUtLLEdBQUc7SUFDckc7SUFDQTs7S0FFQyxHQUNEQyxPQUFNTixJQUFJO1FBQ04sSUFBSSxPQUFPQSxLQUFLQyxJQUFJLEtBQUssVUFBVTtZQUMvQixPQUFPRCxLQUFLQyxJQUFJO1FBQ3BCLE9BQ0ssSUFBSUMsT0FBT0MsUUFBUSxDQUFDSCxLQUFLQyxJQUFJLEdBQUc7WUFDakMsT0FBT0QsS0FBS0MsSUFBSSxDQUFDTSxRQUFRLENBQUMsSUFBSSxDQUFDVCxRQUFRO1FBQzNDLE9BQ0s7WUFDRCxNQUFNLElBQUlOLFlBQVlnQixXQUFXLENBQUMsb0JBQW9CUixLQUFLSyxHQUFHO1FBQ2xFO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcGFyc2Vycy90ZXh0LmpzPzIyZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlsL2Vycm9ycy5qc1wiKTtcbmNvbnN0IFRFWFRfUkVHRVhQID0gL1xcLih0eHR8aHRtfGh0bWx8bWR8eG1sfGpzfG1pbnxtYXB8Y3NzfHNjc3N8bGVzc3xzdmcpJC9pO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcGFyc2VyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciBwYXJzZXJzLlxuICAgICAqL1xuICAgIG9yZGVyOiAzMDAsXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBhbGxvdyBcImVtcHR5XCIgZmlsZXMgKHplcm8gYnl0ZXMpLlxuICAgICAqL1xuICAgIGFsbG93RW1wdHk6IHRydWUsXG4gICAgLyoqXG4gICAgICogVGhlIGVuY29kaW5nIHRoYXQgdGhlIHRleHQgaXMgZXhwZWN0ZWQgdG8gYmUgaW4uXG4gICAgICovXG4gICAgZW5jb2Rpbmc6IFwidXRmOFwiLFxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHBhcnNlciBjYW4gcGFyc2UgYSBnaXZlbiBmaWxlIHJlZmVyZW5jZS5cbiAgICAgKiBQYXJzZXJzIHRoYXQgcmV0dXJuIHRydWUgd2lsbCBiZSB0cmllZCwgaW4gb3JkZXIsIHVudGlsIG9uZSBzdWNjZXNzZnVsbHkgcGFyc2VzIHRoZSBmaWxlLlxuICAgICAqIFBhcnNlcnMgdGhhdCByZXR1cm4gZmFsc2Ugd2lsbCBiZSBza2lwcGVkLCBVTkxFU1MgYWxsIHBhcnNlcnMgcmV0dXJuZWQgZmFsc2UsIGluIHdoaWNoIGNhc2VcbiAgICAgKiBldmVyeSBwYXJzZXIgd2lsbCBiZSB0cmllZC5cbiAgICAgKi9cbiAgICBjYW5QYXJzZShmaWxlKSB7XG4gICAgICAgIC8vIFVzZSB0aGlzIHBhcnNlciBpZiB0aGUgZmlsZSBpcyBhIHN0cmluZyBvciBCdWZmZXIsIGFuZCBoYXMgYSBrbm93biB0ZXh0LWJhc2VkIGV4dGVuc2lvblxuICAgICAgICByZXR1cm4gKHR5cGVvZiBmaWxlLmRhdGEgPT09IFwic3RyaW5nXCIgfHwgQnVmZmVyLmlzQnVmZmVyKGZpbGUuZGF0YSkpICYmIFRFWFRfUkVHRVhQLnRlc3QoZmlsZS51cmwpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBnaXZlbiBmaWxlIGFzIHRleHRcbiAgICAgKi9cbiAgICBwYXJzZShmaWxlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmlsZS5kYXRhID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZS5kYXRhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEJ1ZmZlci5pc0J1ZmZlcihmaWxlLmRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsZS5kYXRhLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLlBhcnNlckVycm9yKFwiZGF0YSBpcyBub3QgdGV4dFwiLCBmaWxlLnVybCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbiJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVycm9yc19qc18xIiwicmVxdWlyZSIsIlRFWFRfUkVHRVhQIiwiZGVmYXVsdCIsIm9yZGVyIiwiYWxsb3dFbXB0eSIsImVuY29kaW5nIiwiY2FuUGFyc2UiLCJmaWxlIiwiZGF0YSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwidGVzdCIsInVybCIsInBhcnNlIiwidG9TdHJpbmciLCJQYXJzZXJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/text.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/yaml.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/yaml.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nconst js_yaml_1 = __importDefault(__webpack_require__(/*! js-yaml */ \"(ssr)/./node_modules/js-yaml/index.js\"));\nconst js_yaml_2 = __webpack_require__(/*! js-yaml */ \"(ssr)/./node_modules/js-yaml/index.js\");\nexports[\"default\"] = {\n    /**\n     * The order that this parser will run, in relation to other parsers.\n     */ order: 200,\n    /**\n     * Whether to allow \"empty\" files. This includes zero-byte files, as well as empty JSON objects.\n     */ allowEmpty: true,\n    /**\n     * Determines whether this parser can parse a given file reference.\n     * Parsers that match will be tried, in order, until one successfully parses the file.\n     * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case\n     * every parser will be tried.\n     */ canParse: [\n        \".yaml\",\n        \".yml\",\n        \".json\"\n    ],\n    /**\n     * Parses the given file as YAML\n     *\n     * @param file           - An object containing information about the referenced file\n     * @param file.url       - The full URL of the referenced file\n     * @param file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n     * @param file.data      - The file contents. This will be whatever data type was returned by the resolver\n     * @returns\n     */ async parse (file) {\n        // eslint-disable-line require-await\n        let data = file.data;\n        if (Buffer.isBuffer(data)) {\n            data = data.toString();\n        }\n        if (typeof data === \"string\") {\n            try {\n                return js_yaml_1.default.load(data, {\n                    schema: js_yaml_2.JSON_SCHEMA\n                });\n            } catch (e) {\n                // @ts-expect-error TS(2571): Object is of type 'unknown'.\n                throw new errors_js_1.ParserError(e.message, file.url);\n            }\n        } else {\n            // data is already a JavaScript value (object, array, number, null, NaN, etc.)\n            return data;\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcGFyc2Vycy95YW1sLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGNBQWNDLG1CQUFPQSxDQUFDLDJHQUFtQjtBQUMvQyxNQUFNQyxZQUFZVCxnQkFBZ0JRLG1CQUFPQSxDQUFDLHNEQUFTO0FBQ25ELE1BQU1FLFlBQVlGLG1CQUFPQSxDQUFDLHNEQUFTO0FBQ25DSCxrQkFBZSxHQUFHO0lBQ2Q7O0tBRUMsR0FDRE8sT0FBTztJQUNQOztLQUVDLEdBQ0RDLFlBQVk7SUFDWjs7Ozs7S0FLQyxHQUNEQyxVQUFVO1FBQUM7UUFBUztRQUFRO0tBQVE7SUFDcEM7Ozs7Ozs7O0tBUUMsR0FDRCxNQUFNQyxPQUFNQyxJQUFJO1FBQ1osb0NBQW9DO1FBQ3BDLElBQUlDLE9BQU9ELEtBQUtDLElBQUk7UUFDcEIsSUFBSUMsT0FBT0MsUUFBUSxDQUFDRixPQUFPO1lBQ3ZCQSxPQUFPQSxLQUFLRyxRQUFRO1FBQ3hCO1FBQ0EsSUFBSSxPQUFPSCxTQUFTLFVBQVU7WUFDMUIsSUFBSTtnQkFDQSxPQUFPUixVQUFVRSxPQUFPLENBQUNVLElBQUksQ0FBQ0osTUFBTTtvQkFBRUssUUFBUVosVUFBVWEsV0FBVztnQkFBQztZQUN4RSxFQUNBLE9BQU9DLEdBQUc7Z0JBQ04sMERBQTBEO2dCQUMxRCxNQUFNLElBQUlqQixZQUFZa0IsV0FBVyxDQUFDRCxFQUFFRSxPQUFPLEVBQUVWLEtBQUtXLEdBQUc7WUFDekQ7UUFDSixPQUNLO1lBQ0QsOEVBQThFO1lBQzlFLE9BQU9WO1FBQ1g7SUFDSjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGJvdC11aS8uL25vZGVfbW9kdWxlcy9AYXBpZGV2dG9vbHMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9kaXN0L2xpYi9wYXJzZXJzL3lhbWwuanM/OGY1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QganNfeWFtbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJqcy15YW1sXCIpKTtcbmNvbnN0IGpzX3lhbWxfMiA9IHJlcXVpcmUoXCJqcy15YW1sXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcGFyc2VyIHdpbGwgcnVuLCBpbiByZWxhdGlvbiB0byBvdGhlciBwYXJzZXJzLlxuICAgICAqL1xuICAgIG9yZGVyOiAyMDAsXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBhbGxvdyBcImVtcHR5XCIgZmlsZXMuIFRoaXMgaW5jbHVkZXMgemVyby1ieXRlIGZpbGVzLCBhcyB3ZWxsIGFzIGVtcHR5IEpTT04gb2JqZWN0cy5cbiAgICAgKi9cbiAgICBhbGxvd0VtcHR5OiB0cnVlLFxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHBhcnNlciBjYW4gcGFyc2UgYSBnaXZlbiBmaWxlIHJlZmVyZW5jZS5cbiAgICAgKiBQYXJzZXJzIHRoYXQgbWF0Y2ggd2lsbCBiZSB0cmllZCwgaW4gb3JkZXIsIHVudGlsIG9uZSBzdWNjZXNzZnVsbHkgcGFyc2VzIHRoZSBmaWxlLlxuICAgICAqIFBhcnNlcnMgdGhhdCBkb24ndCBtYXRjaCB3aWxsIGJlIHNraXBwZWQsIFVOTEVTUyBub25lIG9mIHRoZSBwYXJzZXJzIG1hdGNoLCBpbiB3aGljaCBjYXNlXG4gICAgICogZXZlcnkgcGFyc2VyIHdpbGwgYmUgdHJpZWQuXG4gICAgICovXG4gICAgY2FuUGFyc2U6IFtcIi55YW1sXCIsIFwiLnltbFwiLCBcIi5qc29uXCJdLFxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZ2l2ZW4gZmlsZSBhcyBZQU1MXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZmlsZSAgICAgICAgICAgLSBBbiBvYmplY3QgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcmVmZXJlbmNlZCBmaWxlXG4gICAgICogQHBhcmFtIGZpbGUudXJsICAgICAgIC0gVGhlIGZ1bGwgVVJMIG9mIHRoZSByZWZlcmVuY2VkIGZpbGVcbiAgICAgKiBAcGFyYW0gZmlsZS5leHRlbnNpb24gLSBUaGUgbG93ZXJjYXNlZCBmaWxlIGV4dGVuc2lvbiAoZS5nLiBcIi50eHRcIiwgXCIuaHRtbFwiLCBldGMuKVxuICAgICAqIEBwYXJhbSBmaWxlLmRhdGEgICAgICAtIFRoZSBmaWxlIGNvbnRlbnRzLiBUaGlzIHdpbGwgYmUgd2hhdGV2ZXIgZGF0YSB0eXBlIHdhcyByZXR1cm5lZCBieSB0aGUgcmVzb2x2ZXJcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIGFzeW5jIHBhcnNlKGZpbGUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgICAgIGxldCBkYXRhID0gZmlsZS5kYXRhO1xuICAgICAgICBpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4ganNfeWFtbF8xLmRlZmF1bHQubG9hZChkYXRhLCB7IHNjaGVtYToganNfeWFtbF8yLkpTT05fU0NIRU1BIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTKDI1NzEpOiBPYmplY3QgaXMgb2YgdHlwZSAndW5rbm93bicuXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLlBhcnNlckVycm9yKGUubWVzc2FnZSwgZmlsZS51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gZGF0YSBpcyBhbHJlYWR5IGEgSmF2YVNjcmlwdCB2YWx1ZSAob2JqZWN0LCBhcnJheSwgbnVtYmVyLCBudWxsLCBOYU4sIGV0Yy4pXG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVycm9yc19qc18xIiwicmVxdWlyZSIsImpzX3lhbWxfMSIsImpzX3lhbWxfMiIsImRlZmF1bHQiLCJvcmRlciIsImFsbG93RW1wdHkiLCJjYW5QYXJzZSIsInBhcnNlIiwiZmlsZSIsImRhdGEiLCJCdWZmZXIiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwibG9hZCIsInNjaGVtYSIsIkpTT05fU0NIRU1BIiwiZSIsIlBhcnNlckVycm9yIiwibWVzc2FnZSIsInVybCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parsers/yaml.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ref_js_1 = __importDefault(__webpack_require__(/*! ./ref.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js\"));\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst errors_js_1 = __webpack_require__(/*! ./util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nconst slashes = /\\//g;\nconst tildes = /~/g;\nconst escapedSlash = /~1/g;\nconst escapedTilde = /~0/g;\n/**\n * This class represents a single JSON pointer and its resolved value.\n *\n * @param $ref\n * @param path\n * @param [friendlyPath] - The original user-specified path (used for error messages)\n * @class\n */ class Pointer {\n    constructor($ref, path, friendlyPath){\n        this.$ref = $ref;\n        this.path = path;\n        this.originalPath = friendlyPath || path;\n        this.value = undefined;\n        this.circular = false;\n        this.indirections = 0;\n    }\n    /**\n     * Resolves the value of a nested property within the given object.\n     *\n     * @param obj - The object that will be crawled\n     * @param options\n     * @param pathFromRoot - the path of place that initiated resolving\n     *\n     * @returns\n     * Returns a JSON pointer whose {@link Pointer#value} is the resolved value.\n     * If resolving this value required resolving other JSON references, then\n     * the {@link Pointer#$ref} and {@link Pointer#path} will reflect the resolution path\n     * of the resolved value.\n     */ resolve(obj, options, pathFromRoot) {\n        const tokens = Pointer.parse(this.path, this.originalPath);\n        // Crawl the object, one token at a time\n        this.value = unwrapOrThrow(obj);\n        for(let i = 0; i < tokens.length; i++){\n            if (resolveIf$Ref(this, options)) {\n                // The $ref path has changed, so append the remaining tokens to the path\n                this.path = Pointer.join(this.path, tokens.slice(i));\n            }\n            if (typeof this.value === \"object\" && this.value !== null && \"$ref\" in this.value) {\n                return this;\n            }\n            const token = tokens[i];\n            if (this.value[token] === undefined || this.value[token] === null) {\n                this.value = null;\n                throw new errors_js_1.MissingPointerError(token, decodeURI(this.originalPath));\n            } else {\n                this.value = this.value[token];\n            }\n        }\n        // Resolve the final value\n        if (!this.value || this.value.$ref && url.resolve(this.path, this.value.$ref) !== pathFromRoot) {\n            resolveIf$Ref(this, options);\n        }\n        return this;\n    }\n    /**\n     * Sets the value of a nested property within the given object.\n     *\n     * @param obj - The object that will be crawled\n     * @param value - the value to assign\n     * @param options\n     *\n     * @returns\n     * Returns the modified object, or an entirely new object if the entire object is overwritten.\n     */ set(obj, value, options) {\n        const tokens = Pointer.parse(this.path);\n        let token;\n        if (tokens.length === 0) {\n            // There are no tokens, replace the entire object with the new value\n            this.value = value;\n            return value;\n        }\n        // Crawl the object, one token at a time\n        this.value = unwrapOrThrow(obj);\n        for(let i = 0; i < tokens.length - 1; i++){\n            resolveIf$Ref(this, options);\n            token = tokens[i];\n            if (this.value && this.value[token] !== undefined) {\n                // The token exists\n                this.value = this.value[token];\n            } else {\n                // The token doesn't exist, so create it\n                this.value = setValue(this, token, {});\n            }\n        }\n        // Set the value of the final token\n        resolveIf$Ref(this, options);\n        token = tokens[tokens.length - 1];\n        setValue(this, token, value);\n        // Return the updated object\n        return obj;\n    }\n    /**\n     * Parses a JSON pointer (or a path containing a JSON pointer in the hash)\n     * and returns an array of the pointer's tokens.\n     * (e.g. \"schema.json#/definitions/person/name\" => [\"definitions\", \"person\", \"name\"])\n     *\n     * The pointer is parsed according to RFC 6901\n     * {@link https://tools.ietf.org/html/rfc6901#section-3}\n     *\n     * @param path\n     * @param [originalPath]\n     * @returns\n     */ static parse(path, originalPath) {\n        // Get the JSON pointer from the path's hash\n        let pointer = url.getHash(path).substr(1);\n        // If there's no pointer, then there are no tokens,\n        // so return an empty array\n        if (!pointer) {\n            return [];\n        }\n        // Split into an array\n        pointer = pointer.split(\"/\");\n        // Decode each part, according to RFC 6901\n        for(let i = 0; i < pointer.length; i++){\n            pointer[i] = decodeURIComponent(pointer[i].replace(escapedSlash, \"/\").replace(escapedTilde, \"~\"));\n        }\n        if (pointer[0] !== \"\") {\n            throw new errors_js_1.InvalidPointerError(pointer, originalPath === undefined ? path : originalPath);\n        }\n        return pointer.slice(1);\n    }\n    /**\n     * Creates a JSON pointer path, by joining one or more tokens to a base path.\n     *\n     * @param base - The base path (e.g. \"schema.json#/definitions/person\")\n     * @param tokens - The token(s) to append (e.g. [\"name\", \"first\"])\n     * @returns\n     */ static join(base, tokens) {\n        // Ensure that the base path contains a hash\n        if (base.indexOf(\"#\") === -1) {\n            base += \"#\";\n        }\n        // Append each token to the base path\n        tokens = Array.isArray(tokens) ? tokens : [\n            tokens\n        ];\n        for(let i = 0; i < tokens.length; i++){\n            const token = tokens[i];\n            // Encode the token, according to RFC 6901\n            base += \"/\" + encodeURIComponent(token.replace(tildes, \"~0\").replace(slashes, \"~1\"));\n        }\n        return base;\n    }\n}\n/**\n * If the given pointer's {@link Pointer#value} is a JSON reference,\n * then the reference is resolved and {@link Pointer#value} is replaced with the resolved value.\n * In addition, {@link Pointer#path} and {@link Pointer#$ref} are updated to reflect the\n * resolution path of the new value.\n *\n * @param pointer\n * @param options\n * @returns - Returns `true` if the resolution path changed\n */ function resolveIf$Ref(pointer, options) {\n    // Is the value a JSON reference? (and allowed?)\n    if (ref_js_1.default.isAllowed$Ref(pointer.value, options)) {\n        const $refPath = url.resolve(pointer.path, pointer.value.$ref);\n        if ($refPath === pointer.path) {\n            // The value is a reference to itself, so there's nothing to do.\n            pointer.circular = true;\n        } else {\n            const resolved = pointer.$ref.$refs._resolve($refPath, pointer.path, options);\n            if (resolved === null) {\n                return false;\n            }\n            pointer.indirections += resolved.indirections + 1;\n            if (ref_js_1.default.isExtended$Ref(pointer.value)) {\n                // This JSON reference \"extends\" the resolved value, rather than simply pointing to it.\n                // So the resolved path does NOT change.  Just the value does.\n                pointer.value = ref_js_1.default.dereference(pointer.value, resolved.value);\n                return false;\n            } else {\n                // Resolve the reference\n                pointer.$ref = resolved.$ref;\n                pointer.path = resolved.path;\n                pointer.value = resolved.value;\n            }\n            return true;\n        }\n    }\n}\nexports[\"default\"] = Pointer;\n/**\n * Sets the specified token value of the {@link Pointer#value}.\n *\n * The token is evaluated according to RFC 6901.\n * {@link https://tools.ietf.org/html/rfc6901#section-4}\n *\n * @param pointer - The JSON Pointer whose value will be modified\n * @param token - A JSON Pointer token that indicates how to modify `obj`\n * @param value - The value to assign\n * @returns - Returns the assigned value\n */ function setValue(pointer, token, value) {\n    if (pointer.value && typeof pointer.value === \"object\") {\n        if (token === \"-\" && Array.isArray(pointer.value)) {\n            pointer.value.push(value);\n        } else {\n            pointer.value[token] = value;\n        }\n    } else {\n        throw new errors_js_1.JSONParserError(`Error assigning $ref pointer \"${pointer.path}\". \\nCannot set \"${token}\" of a non-object.`);\n    }\n    return value;\n}\nfunction unwrapOrThrow(value) {\n    if ((0, errors_js_1.isHandledError)(value)) {\n        throw value;\n    }\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst pointer_js_1 = __importDefault(__webpack_require__(/*! ./pointer.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js\"));\nconst errors_js_1 = __webpack_require__(/*! ./util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nconst url_js_1 = __webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\");\n/**\n * This class represents a single JSON reference and its resolved value.\n *\n * @class\n */ class $Ref {\n    constructor($refs){\n        /**\n         * List of all errors. Undefined if no errors.\n         */ this.errors = [];\n        this.$refs = $refs;\n    }\n    /**\n     * Pushes an error to errors array.\n     *\n     * @param err - The error to be pushed\n     * @returns\n     */ addError(err) {\n        if (this.errors === undefined) {\n            this.errors = [];\n        }\n        const existingErrors = this.errors.map(({ footprint })=>footprint);\n        // the path has been almost certainly set at this point,\n        // but just in case something went wrong, normalizeError injects path if necessary\n        // moreover, certain errors might point at the same spot, so filter them out to reduce noise\n        if (\"errors\" in err && Array.isArray(err.errors)) {\n            this.errors.push(...err.errors.map(errors_js_1.normalizeError).filter(({ footprint })=>!existingErrors.includes(footprint)));\n        } else if (!(\"footprint\" in err) || !existingErrors.includes(err.footprint)) {\n            this.errors.push((0, errors_js_1.normalizeError)(err));\n        }\n    }\n    /**\n     * Determines whether the given JSON reference exists within this {@link $Ref#value}.\n     *\n     * @param path - The full path being resolved, optionally with a JSON pointer in the hash\n     * @param options\n     * @returns\n     */ exists(path, options) {\n        try {\n            this.resolve(path, options);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Resolves the given JSON reference within this {@link $Ref#value} and returns the resolved value.\n     *\n     * @param path - The full path being resolved, optionally with a JSON pointer in the hash\n     * @param options\n     * @returns - Returns the resolved value\n     */ get(path, options) {\n        return this.resolve(path, options)?.value;\n    }\n    /**\n     * Resolves the given JSON reference within this {@link $Ref#value}.\n     *\n     * @param path - The full path being resolved, optionally with a JSON pointer in the hash\n     * @param options\n     * @param friendlyPath - The original user-specified path (used for error messages)\n     * @param pathFromRoot - The path of `obj` from the schema root\n     * @returns\n     */ resolve(path, options, friendlyPath, pathFromRoot) {\n        const pointer = new pointer_js_1.default(this, path, friendlyPath);\n        try {\n            return pointer.resolve(this.value, options, pathFromRoot);\n        } catch (err) {\n            if (!options || !options.continueOnError || !(0, errors_js_1.isHandledError)(err)) {\n                throw err;\n            }\n            if (err.path === null) {\n                err.path = (0, url_js_1.safePointerToPath)((0, url_js_1.getHash)(pathFromRoot));\n            }\n            if (err instanceof errors_js_1.InvalidPointerError) {\n                err.source = decodeURI((0, url_js_1.stripHash)(pathFromRoot));\n            }\n            this.addError(err);\n            return null;\n        }\n    }\n    /**\n     * Sets the value of a nested property within this {@link $Ref#value}.\n     * If the property, or any of its parents don't exist, they will be created.\n     *\n     * @param path - The full path of the property to set, optionally with a JSON pointer in the hash\n     * @param value - The value to assign\n     */ set(path, value) {\n        // @ts-expect-error TS(2554): Expected 3 arguments, but got 2.\n        const pointer = new pointer_js_1.default(this, path);\n        this.value = pointer.set(this.value, value);\n    }\n    /**\n     * Determines whether the given value is a JSON reference.\n     *\n     * @param value - The value to inspect\n     * @returns\n     */ static is$Ref(value) {\n        return value && typeof value === \"object\" && typeof value.$ref === \"string\" && value.$ref.length > 0;\n    }\n    /**\n     * Determines whether the given value is an external JSON reference.\n     *\n     * @param value - The value to inspect\n     * @returns\n     */ static isExternal$Ref(value) {\n        return $Ref.is$Ref(value) && value.$ref[0] !== \"#\";\n    }\n    /**\n     * Determines whether the given value is a JSON reference, and whether it is allowed by the options.\n     * For example, if it references an external file, then options.resolve.external must be true.\n     *\n     * @param value - The value to inspect\n     * @param options\n     * @returns\n     */ static isAllowed$Ref(value, options) {\n        if (this.is$Ref(value)) {\n            if (value.$ref.substring(0, 2) === \"#/\" || value.$ref === \"#\") {\n                // It's a JSON Pointer reference, which is always allowed\n                return true;\n            } else if (value.$ref[0] !== \"#\" && (!options || options.resolve.external)) {\n                // It's an external reference, which is allowed by the options\n                return true;\n            }\n        }\n    }\n    /**\n     * Determines whether the given value is a JSON reference that \"extends\" its resolved value.\n     * That is, it has extra properties (in addition to \"$ref\"), so rather than simply pointing to\n     * an existing value, this $ref actually creates a NEW value that is a shallow copy of the resolved\n     * value, plus the extra properties.\n     *\n     * @example: {\n       person: {\n         properties: {\n           firstName: { type: string }\n           lastName: { type: string }\n         }\n       }\n       employee: {\n         properties: {\n           $ref: #/person/properties\n           salary: { type: number }\n         }\n       }\n     }\n     *  In this example, \"employee\" is an extended $ref, since it extends \"person\" with an additional\n     *  property (salary).  The result is a NEW value that looks like this:\n     *\n     *  {\n     *    properties: {\n     *      firstName: { type: string }\n     *      lastName: { type: string }\n     *      salary: { type: number }\n     *    }\n     *  }\n     *\n     * @param value - The value to inspect\n     * @returns\n     */ static isExtended$Ref(value) {\n        return $Ref.is$Ref(value) && Object.keys(value).length > 1;\n    }\n    /**\n     * Returns the resolved value of a JSON Reference.\n     * If necessary, the resolved value is merged with the JSON Reference to create a new object\n     *\n     * @example: {\n    person: {\n      properties: {\n        firstName: { type: string }\n        lastName: { type: string }\n      }\n    }\n    employee: {\n      properties: {\n        $ref: #/person/properties\n        salary: { type: number }\n      }\n    }\n    } When \"person\" and \"employee\" are merged, you end up with the following object:\n     *\n     *  {\n     *    properties: {\n     *      firstName: { type: string }\n     *      lastName: { type: string }\n     *      salary: { type: number }\n     *    }\n     *  }\n     *\n     * @param $ref - The JSON reference object (the one with the \"$ref\" property)\n     * @param resolvedValue - The resolved value, which can be any type\n     * @returns - Returns the dereferenced value\n     */ static dereference($ref, resolvedValue) {\n        if (resolvedValue && typeof resolvedValue === \"object\" && $Ref.isExtended$Ref($ref)) {\n            const merged = {};\n            for (const key of Object.keys($ref)){\n                if (key !== \"$ref\") {\n                    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n                    merged[key] = $ref[key];\n                }\n            }\n            for (const key of Object.keys(resolvedValue)){\n                if (!(key in merged)) {\n                    // @ts-expect-error TS(7053): Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n                    merged[key] = resolvedValue[key];\n                }\n            }\n            return merged;\n        } else {\n            // Completely replace the original reference with the resolved value\n            return resolvedValue;\n        }\n    }\n}\nexports[\"default\"] = $Ref;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcmVmLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFLLFNBQVVDLEdBQUc7SUFDakUsT0FBTyxPQUFRQSxJQUFJQyxVQUFVLEdBQUlELE1BQU07UUFBRSxXQUFXQTtJQUFJO0FBQzVEO0FBQ0FFLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1DLGVBQWVQLGdCQUFnQlEsbUJBQU9BLENBQUMsa0dBQWM7QUFDM0QsTUFBTUMsY0FBY0QsbUJBQU9BLENBQUMsMEdBQWtCO0FBQzlDLE1BQU1FLFdBQVdGLG1CQUFPQSxDQUFDLG9HQUFlO0FBQ3hDOzs7O0NBSUMsR0FDRCxNQUFNRztJQUNGQyxZQUFZQyxLQUFLLENBQUU7UUFDZjs7U0FFQyxHQUNELElBQUksQ0FBQ0MsTUFBTSxHQUFHLEVBQUU7UUFDaEIsSUFBSSxDQUFDRCxLQUFLLEdBQUdBO0lBQ2pCO0lBQ0E7Ozs7O0tBS0MsR0FDREUsU0FBU0MsR0FBRyxFQUFFO1FBQ1YsSUFBSSxJQUFJLENBQUNGLE1BQU0sS0FBS0csV0FBVztZQUMzQixJQUFJLENBQUNILE1BQU0sR0FBRyxFQUFFO1FBQ3BCO1FBQ0EsTUFBTUksaUJBQWlCLElBQUksQ0FBQ0osTUFBTSxDQUFDSyxHQUFHLENBQUMsQ0FBQyxFQUFFQyxTQUFTLEVBQUUsR0FBS0E7UUFDMUQsd0RBQXdEO1FBQ3hELGtGQUFrRjtRQUNsRiw0RkFBNEY7UUFDNUYsSUFBSSxZQUFZSixPQUFPSyxNQUFNQyxPQUFPLENBQUNOLElBQUlGLE1BQU0sR0FBRztZQUM5QyxJQUFJLENBQUNBLE1BQU0sQ0FBQ1MsSUFBSSxJQUFJUCxJQUFJRixNQUFNLENBQUNLLEdBQUcsQ0FBQ1YsWUFBWWUsY0FBYyxFQUFFQyxNQUFNLENBQUMsQ0FBQyxFQUFFTCxTQUFTLEVBQUUsR0FBSyxDQUFDRixlQUFlUSxRQUFRLENBQUNOO1FBQ3RILE9BQ0ssSUFBSSxDQUFFLGdCQUFlSixHQUFFLEtBQU0sQ0FBQ0UsZUFBZVEsUUFBUSxDQUFDVixJQUFJSSxTQUFTLEdBQUc7WUFDdkUsSUFBSSxDQUFDTixNQUFNLENBQUNTLElBQUksQ0FBQyxDQUFDLEdBQUdkLFlBQVllLGNBQWMsRUFBRVI7UUFDckQ7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNEVyxPQUFPQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNsQixJQUFJO1lBQ0EsSUFBSSxDQUFDQyxPQUFPLENBQUNGLE1BQU1DO1lBQ25CLE9BQU87UUFDWCxFQUNBLE9BQU9FLEdBQUc7WUFDTixPQUFPO1FBQ1g7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNEQyxJQUFJSixJQUFJLEVBQUVDLE9BQU8sRUFBRTtRQUNmLE9BQU8sSUFBSSxDQUFDQyxPQUFPLENBQUNGLE1BQU1DLFVBQVV2QjtJQUN4QztJQUNBOzs7Ozs7OztLQVFDLEdBQ0R3QixRQUFRRixJQUFJLEVBQUVDLE9BQU8sRUFBRUksWUFBWSxFQUFFQyxZQUFZLEVBQUU7UUFDL0MsTUFBTUMsVUFBVSxJQUFJNUIsYUFBYTZCLE9BQU8sQ0FBQyxJQUFJLEVBQUVSLE1BQU1LO1FBQ3JELElBQUk7WUFDQSxPQUFPRSxRQUFRTCxPQUFPLENBQUMsSUFBSSxDQUFDeEIsS0FBSyxFQUFFdUIsU0FBU0s7UUFDaEQsRUFDQSxPQUFPbEIsS0FBSztZQUNSLElBQUksQ0FBQ2EsV0FBVyxDQUFDQSxRQUFRUSxlQUFlLElBQUksQ0FBQyxDQUFDLEdBQUc1QixZQUFZNkIsY0FBYyxFQUFFdEIsTUFBTTtnQkFDL0UsTUFBTUE7WUFDVjtZQUNBLElBQUlBLElBQUlZLElBQUksS0FBSyxNQUFNO2dCQUNuQlosSUFBSVksSUFBSSxHQUFHLENBQUMsR0FBR2xCLFNBQVM2QixpQkFBaUIsRUFBRSxDQUFDLEdBQUc3QixTQUFTOEIsT0FBTyxFQUFFTjtZQUNyRTtZQUNBLElBQUlsQixlQUFlUCxZQUFZZ0MsbUJBQW1CLEVBQUU7Z0JBQ2hEekIsSUFBSTBCLE1BQU0sR0FBR0MsVUFBVSxDQUFDLEdBQUdqQyxTQUFTa0MsU0FBUyxFQUFFVjtZQUNuRDtZQUNBLElBQUksQ0FBQ25CLFFBQVEsQ0FBQ0M7WUFDZCxPQUFPO1FBQ1g7SUFDSjtJQUNBOzs7Ozs7S0FNQyxHQUNENkIsSUFBSWpCLElBQUksRUFBRXRCLEtBQUssRUFBRTtRQUNiLDhEQUE4RDtRQUM5RCxNQUFNNkIsVUFBVSxJQUFJNUIsYUFBYTZCLE9BQU8sQ0FBQyxJQUFJLEVBQUVSO1FBQy9DLElBQUksQ0FBQ3RCLEtBQUssR0FBRzZCLFFBQVFVLEdBQUcsQ0FBQyxJQUFJLENBQUN2QyxLQUFLLEVBQUVBO0lBQ3pDO0lBQ0E7Ozs7O0tBS0MsR0FDRCxPQUFPd0MsT0FBT3hDLEtBQUssRUFBRTtRQUNqQixPQUFPQSxTQUFTLE9BQU9BLFVBQVUsWUFBWSxPQUFPQSxNQUFNeUMsSUFBSSxLQUFLLFlBQVl6QyxNQUFNeUMsSUFBSSxDQUFDQyxNQUFNLEdBQUc7SUFDdkc7SUFDQTs7Ozs7S0FLQyxHQUNELE9BQU9DLGVBQWUzQyxLQUFLLEVBQUU7UUFDekIsT0FBT0ssS0FBS21DLE1BQU0sQ0FBQ3hDLFVBQVVBLE1BQU15QyxJQUFJLENBQUMsRUFBRSxLQUFLO0lBQ25EO0lBQ0E7Ozs7Ozs7S0FPQyxHQUNELE9BQU9HLGNBQWM1QyxLQUFLLEVBQUV1QixPQUFPLEVBQUU7UUFDakMsSUFBSSxJQUFJLENBQUNpQixNQUFNLENBQUN4QyxRQUFRO1lBQ3BCLElBQUlBLE1BQU15QyxJQUFJLENBQUNJLFNBQVMsQ0FBQyxHQUFHLE9BQU8sUUFBUTdDLE1BQU15QyxJQUFJLEtBQUssS0FBSztnQkFDM0QseURBQXlEO2dCQUN6RCxPQUFPO1lBQ1gsT0FDSyxJQUFJekMsTUFBTXlDLElBQUksQ0FBQyxFQUFFLEtBQUssT0FBUSxFQUFDbEIsV0FBV0EsUUFBUUMsT0FBTyxDQUFDc0IsUUFBUSxHQUFHO2dCQUN0RSw4REFBOEQ7Z0JBQzlELE9BQU87WUFDWDtRQUNKO0lBQ0o7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUNDLEdBQ0QsT0FBT0MsZUFBZS9DLEtBQUssRUFBRTtRQUN6QixPQUFPSyxLQUFLbUMsTUFBTSxDQUFDeEMsVUFBVUgsT0FBT21ELElBQUksQ0FBQ2hELE9BQU8wQyxNQUFNLEdBQUc7SUFDN0Q7SUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBOEJDLEdBQ0QsT0FBT08sWUFBWVIsSUFBSSxFQUFFUyxhQUFhLEVBQUU7UUFDcEMsSUFBSUEsaUJBQWlCLE9BQU9BLGtCQUFrQixZQUFZN0MsS0FBSzBDLGNBQWMsQ0FBQ04sT0FBTztZQUNqRixNQUFNVSxTQUFTLENBQUM7WUFDaEIsS0FBSyxNQUFNQyxPQUFPdkQsT0FBT21ELElBQUksQ0FBQ1AsTUFBTztnQkFDakMsSUFBSVcsUUFBUSxRQUFRO29CQUNoQixxSUFBcUk7b0JBQ3JJRCxNQUFNLENBQUNDLElBQUksR0FBR1gsSUFBSSxDQUFDVyxJQUFJO2dCQUMzQjtZQUNKO1lBQ0EsS0FBSyxNQUFNQSxPQUFPdkQsT0FBT21ELElBQUksQ0FBQ0UsZUFBZ0I7Z0JBQzFDLElBQUksQ0FBRUUsQ0FBQUEsT0FBT0QsTUFBSyxHQUFJO29CQUNsQixxSUFBcUk7b0JBQ3JJQSxNQUFNLENBQUNDLElBQUksR0FBR0YsYUFBYSxDQUFDRSxJQUFJO2dCQUNwQztZQUNKO1lBQ0EsT0FBT0Q7UUFDWCxPQUNLO1lBQ0Qsb0VBQW9FO1lBQ3BFLE9BQU9EO1FBQ1g7SUFDSjtBQUNKO0FBQ0FuRCxrQkFBZSxHQUFHTSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcmVmLmpzPzQ5Y2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwb2ludGVyX2pzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vcG9pbnRlci5qc1wiKSk7XG5jb25zdCBlcnJvcnNfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWwvZXJyb3JzLmpzXCIpO1xuY29uc3QgdXJsX2pzXzEgPSByZXF1aXJlKFwiLi91dGlsL3VybC5qc1wiKTtcbi8qKlxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgc2luZ2xlIEpTT04gcmVmZXJlbmNlIGFuZCBpdHMgcmVzb2x2ZWQgdmFsdWUuXG4gKlxuICogQGNsYXNzXG4gKi9cbmNsYXNzICRSZWYge1xuICAgIGNvbnN0cnVjdG9yKCRyZWZzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBMaXN0IG9mIGFsbCBlcnJvcnMuIFVuZGVmaW5lZCBpZiBubyBlcnJvcnMuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLiRyZWZzID0gJHJlZnM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFB1c2hlcyBhbiBlcnJvciB0byBlcnJvcnMgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXJyIC0gVGhlIGVycm9yIHRvIGJlIHB1c2hlZFxuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgYWRkRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9ycyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRXJyb3JzID0gdGhpcy5lcnJvcnMubWFwKCh7IGZvb3RwcmludCB9KSA9PiBmb290cHJpbnQpO1xuICAgICAgICAvLyB0aGUgcGF0aCBoYXMgYmVlbiBhbG1vc3QgY2VydGFpbmx5IHNldCBhdCB0aGlzIHBvaW50LFxuICAgICAgICAvLyBidXQganVzdCBpbiBjYXNlIHNvbWV0aGluZyB3ZW50IHdyb25nLCBub3JtYWxpemVFcnJvciBpbmplY3RzIHBhdGggaWYgbmVjZXNzYXJ5XG4gICAgICAgIC8vIG1vcmVvdmVyLCBjZXJ0YWluIGVycm9ycyBtaWdodCBwb2ludCBhdCB0aGUgc2FtZSBzcG90LCBzbyBmaWx0ZXIgdGhlbSBvdXQgdG8gcmVkdWNlIG5vaXNlXG4gICAgICAgIGlmIChcImVycm9yc1wiIGluIGVyciAmJiBBcnJheS5pc0FycmF5KGVyci5lcnJvcnMpKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKC4uLmVyci5lcnJvcnMubWFwKGVycm9yc19qc18xLm5vcm1hbGl6ZUVycm9yKS5maWx0ZXIoKHsgZm9vdHByaW50IH0pID0+ICFleGlzdGluZ0Vycm9ycy5pbmNsdWRlcyhmb290cHJpbnQpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIShcImZvb3RwcmludFwiIGluIGVycikgfHwgIWV4aXN0aW5nRXJyb3JzLmluY2x1ZGVzKGVyci5mb290cHJpbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKCgwLCBlcnJvcnNfanNfMS5ub3JtYWxpemVFcnJvcikoZXJyKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiBKU09OIHJlZmVyZW5jZSBleGlzdHMgd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZnVsbCBwYXRoIGJlaW5nIHJlc29sdmVkLCBvcHRpb25hbGx5IHdpdGggYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2hcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgZXhpc3RzKHBhdGgsIG9wdGlvbnMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZShwYXRoLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgdGhlIGdpdmVuIEpTT04gcmVmZXJlbmNlIHdpdGhpbiB0aGlzIHtAbGluayAkUmVmI3ZhbHVlfSBhbmQgcmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGF0aCAtIFRoZSBmdWxsIHBhdGggYmVpbmcgcmVzb2x2ZWQsIG9wdGlvbmFsbHkgd2l0aCBhIEpTT04gcG9pbnRlciBpbiB0aGUgaGFzaFxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHJldHVybnMgLSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZVxuICAgICAqL1xuICAgIGdldChwYXRoLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmUocGF0aCwgb3B0aW9ucyk/LnZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gSlNPTiByZWZlcmVuY2Ugd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBUaGUgZnVsbCBwYXRoIGJlaW5nIHJlc29sdmVkLCBvcHRpb25hbGx5IHdpdGggYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2hcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBmcmllbmRseVBhdGggLSBUaGUgb3JpZ2luYWwgdXNlci1zcGVjaWZpZWQgcGF0aCAodXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMpXG4gICAgICogQHBhcmFtIHBhdGhGcm9tUm9vdCAtIFRoZSBwYXRoIG9mIGBvYmpgIGZyb20gdGhlIHNjaGVtYSByb290XG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICByZXNvbHZlKHBhdGgsIG9wdGlvbnMsIGZyaWVuZGx5UGF0aCwgcGF0aEZyb21Sb290KSB7XG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSBuZXcgcG9pbnRlcl9qc18xLmRlZmF1bHQodGhpcywgcGF0aCwgZnJpZW5kbHlQYXRoKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBwb2ludGVyLnJlc29sdmUodGhpcy52YWx1ZSwgb3B0aW9ucywgcGF0aEZyb21Sb290KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuY29udGludWVPbkVycm9yIHx8ICEoMCwgZXJyb3JzX2pzXzEuaXNIYW5kbGVkRXJyb3IpKGVycikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXJyLnBhdGggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBlcnIucGF0aCA9ICgwLCB1cmxfanNfMS5zYWZlUG9pbnRlclRvUGF0aCkoKDAsIHVybF9qc18xLmdldEhhc2gpKHBhdGhGcm9tUm9vdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIGVycm9yc19qc18xLkludmFsaWRQb2ludGVyRXJyb3IpIHtcbiAgICAgICAgICAgICAgICBlcnIuc291cmNlID0gZGVjb2RlVVJJKCgwLCB1cmxfanNfMS5zdHJpcEhhc2gpKHBhdGhGcm9tUm9vdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlcnIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdmFsdWUgb2YgYSBuZXN0ZWQgcHJvcGVydHkgd2l0aGluIHRoaXMge0BsaW5rICRSZWYjdmFsdWV9LlxuICAgICAqIElmIHRoZSBwcm9wZXJ0eSwgb3IgYW55IG9mIGl0cyBwYXJlbnRzIGRvbid0IGV4aXN0LCB0aGV5IHdpbGwgYmUgY3JlYXRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXRoIC0gVGhlIGZ1bGwgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LCBvcHRpb25hbGx5IHdpdGggYSBKU09OIHBvaW50ZXIgaW4gdGhlIGhhc2hcbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gYXNzaWduXG4gICAgICovXG4gICAgc2V0KHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgVFMoMjU1NCk6IEV4cGVjdGVkIDMgYXJndW1lbnRzLCBidXQgZ290IDIuXG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSBuZXcgcG9pbnRlcl9qc18xLmRlZmF1bHQodGhpcywgcGF0aCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBwb2ludGVyLnNldCh0aGlzLnZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBKU09OIHJlZmVyZW5jZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBpbnNwZWN0XG4gICAgICogQHJldHVybnNcbiAgICAgKi9cbiAgICBzdGF0aWMgaXMkUmVmKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLiRyZWYgPT09IFwic3RyaW5nXCIgJiYgdmFsdWUuJHJlZi5sZW5ndGggPiAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGFuIGV4dGVybmFsIEpTT04gcmVmZXJlbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGluc3BlY3RcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHN0YXRpYyBpc0V4dGVybmFsJFJlZih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gJFJlZi5pcyRSZWYodmFsdWUpICYmIHZhbHVlLiRyZWZbMF0gIT09IFwiI1wiO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgSlNPTiByZWZlcmVuY2UsIGFuZCB3aGV0aGVyIGl0IGlzIGFsbG93ZWQgYnkgdGhlIG9wdGlvbnMuXG4gICAgICogRm9yIGV4YW1wbGUsIGlmIGl0IHJlZmVyZW5jZXMgYW4gZXh0ZXJuYWwgZmlsZSwgdGhlbiBvcHRpb25zLnJlc29sdmUuZXh0ZXJuYWwgbXVzdCBiZSB0cnVlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGluc3BlY3RcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zXG4gICAgICovXG4gICAgc3RhdGljIGlzQWxsb3dlZCRSZWYodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHRoaXMuaXMkUmVmKHZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlLiRyZWYuc3Vic3RyaW5nKDAsIDIpID09PSBcIiMvXCIgfHwgdmFsdWUuJHJlZiA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIGEgSlNPTiBQb2ludGVyIHJlZmVyZW5jZSwgd2hpY2ggaXMgYWx3YXlzIGFsbG93ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlLiRyZWZbMF0gIT09IFwiI1wiICYmICghb3B0aW9ucyB8fCBvcHRpb25zLnJlc29sdmUuZXh0ZXJuYWwpKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhbiBleHRlcm5hbCByZWZlcmVuY2UsIHdoaWNoIGlzIGFsbG93ZWQgYnkgdGhlIG9wdGlvbnNcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgSlNPTiByZWZlcmVuY2UgdGhhdCBcImV4dGVuZHNcIiBpdHMgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICogVGhhdCBpcywgaXQgaGFzIGV4dHJhIHByb3BlcnRpZXMgKGluIGFkZGl0aW9uIHRvIFwiJHJlZlwiKSwgc28gcmF0aGVyIHRoYW4gc2ltcGx5IHBvaW50aW5nIHRvXG4gICAgICogYW4gZXhpc3RpbmcgdmFsdWUsIHRoaXMgJHJlZiBhY3R1YWxseSBjcmVhdGVzIGEgTkVXIHZhbHVlIHRoYXQgaXMgYSBzaGFsbG93IGNvcHkgb2YgdGhlIHJlc29sdmVkXG4gICAgICogdmFsdWUsIHBsdXMgdGhlIGV4dHJhIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZToge1xuICAgICAgIHBlcnNvbjoge1xuICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICBmaXJzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAgICAgICAgICAgbGFzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAgICAgICAgIH1cbiAgICAgICB9XG4gICAgICAgZW1wbG95ZWU6IHtcbiAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgJHJlZjogIy9wZXJzb24vcHJvcGVydGllc1xuICAgICAgICAgICBzYWxhcnk6IHsgdHlwZTogbnVtYmVyIH1cbiAgICAgICAgIH1cbiAgICAgICB9XG4gICAgIH1cbiAgICAgKiAgSW4gdGhpcyBleGFtcGxlLCBcImVtcGxveWVlXCIgaXMgYW4gZXh0ZW5kZWQgJHJlZiwgc2luY2UgaXQgZXh0ZW5kcyBcInBlcnNvblwiIHdpdGggYW4gYWRkaXRpb25hbFxuICAgICAqICBwcm9wZXJ0eSAoc2FsYXJ5KS4gIFRoZSByZXN1bHQgaXMgYSBORVcgdmFsdWUgdGhhdCBsb29rcyBsaWtlIHRoaXM6XG4gICAgICpcbiAgICAgKiAge1xuICAgICAqICAgIHByb3BlcnRpZXM6IHtcbiAgICAgKiAgICAgIGZpcnN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICAgICAqICAgICAgbGFzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAgICAgKiAgICAgIHNhbGFyeTogeyB0eXBlOiBudW1iZXIgfVxuICAgICAqICAgIH1cbiAgICAgKiAgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGluc3BlY3RcbiAgICAgKiBAcmV0dXJuc1xuICAgICAqL1xuICAgIHN0YXRpYyBpc0V4dGVuZGVkJFJlZih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gJFJlZi5pcyRSZWYodmFsdWUpICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPiAxO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZSBvZiBhIEpTT04gUmVmZXJlbmNlLlxuICAgICAqIElmIG5lY2Vzc2FyeSwgdGhlIHJlc29sdmVkIHZhbHVlIGlzIG1lcmdlZCB3aXRoIHRoZSBKU09OIFJlZmVyZW5jZSB0byBjcmVhdGUgYSBuZXcgb2JqZWN0XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZToge1xuICAgIHBlcnNvbjoge1xuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBmaXJzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAgICAgICAgbGFzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZW1wbG95ZWU6IHtcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgJHJlZjogIy9wZXJzb24vcHJvcGVydGllc1xuICAgICAgICBzYWxhcnk6IHsgdHlwZTogbnVtYmVyIH1cbiAgICAgIH1cbiAgICB9XG4gICAgfSBXaGVuIFwicGVyc29uXCIgYW5kIFwiZW1wbG95ZWVcIiBhcmUgbWVyZ2VkLCB5b3UgZW5kIHVwIHdpdGggdGhlIGZvbGxvd2luZyBvYmplY3Q6XG4gICAgICpcbiAgICAgKiAge1xuICAgICAqICAgIHByb3BlcnRpZXM6IHtcbiAgICAgKiAgICAgIGZpcnN0TmFtZTogeyB0eXBlOiBzdHJpbmcgfVxuICAgICAqICAgICAgbGFzdE5hbWU6IHsgdHlwZTogc3RyaW5nIH1cbiAgICAgKiAgICAgIHNhbGFyeTogeyB0eXBlOiBudW1iZXIgfVxuICAgICAqICAgIH1cbiAgICAgKiAgfVxuICAgICAqXG4gICAgICogQHBhcmFtICRyZWYgLSBUaGUgSlNPTiByZWZlcmVuY2Ugb2JqZWN0ICh0aGUgb25lIHdpdGggdGhlIFwiJHJlZlwiIHByb3BlcnR5KVxuICAgICAqIEBwYXJhbSByZXNvbHZlZFZhbHVlIC0gVGhlIHJlc29sdmVkIHZhbHVlLCB3aGljaCBjYW4gYmUgYW55IHR5cGVcbiAgICAgKiBAcmV0dXJucyAtIFJldHVybnMgdGhlIGRlcmVmZXJlbmNlZCB2YWx1ZVxuICAgICAqL1xuICAgIHN0YXRpYyBkZXJlZmVyZW5jZSgkcmVmLCByZXNvbHZlZFZhbHVlKSB7XG4gICAgICAgIGlmIChyZXNvbHZlZFZhbHVlICYmIHR5cGVvZiByZXNvbHZlZFZhbHVlID09PSBcIm9iamVjdFwiICYmICRSZWYuaXNFeHRlbmRlZCRSZWYoJHJlZikpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoJHJlZikpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSBcIiRyZWZcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRTKDcwNTMpOiBFbGVtZW50IGltcGxpY2l0bHkgaGFzIGFuICdhbnknIHR5cGUgYmVjYXVzZSBleHByZS4uLiBSZW1vdmUgdGhpcyBjb21tZW50IHRvIHNlZSB0aGUgZnVsbCBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgIG1lcmdlZFtrZXldID0gJHJlZltrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHJlc29sdmVkVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG1lcmdlZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUUyg3MDUzKTogRWxlbWVudCBpbXBsaWNpdGx5IGhhcyBhbiAnYW55JyB0eXBlIGJlY2F1c2UgZXhwcmUuLi4gUmVtb3ZlIHRoaXMgY29tbWVudCB0byBzZWUgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICBtZXJnZWRba2V5XSA9IHJlc29sdmVkVmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQ29tcGxldGVseSByZXBsYWNlIHRoZSBvcmlnaW5hbCByZWZlcmVuY2Ugd2l0aCB0aGUgcmVzb2x2ZWQgdmFsdWVcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlZFZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gJFJlZjtcbiJdLCJuYW1lcyI6WyJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwb2ludGVyX2pzXzEiLCJyZXF1aXJlIiwiZXJyb3JzX2pzXzEiLCJ1cmxfanNfMSIsIiRSZWYiLCJjb25zdHJ1Y3RvciIsIiRyZWZzIiwiZXJyb3JzIiwiYWRkRXJyb3IiLCJlcnIiLCJ1bmRlZmluZWQiLCJleGlzdGluZ0Vycm9ycyIsIm1hcCIsImZvb3RwcmludCIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJub3JtYWxpemVFcnJvciIsImZpbHRlciIsImluY2x1ZGVzIiwiZXhpc3RzIiwicGF0aCIsIm9wdGlvbnMiLCJyZXNvbHZlIiwiZSIsImdldCIsImZyaWVuZGx5UGF0aCIsInBhdGhGcm9tUm9vdCIsInBvaW50ZXIiLCJkZWZhdWx0IiwiY29udGludWVPbkVycm9yIiwiaXNIYW5kbGVkRXJyb3IiLCJzYWZlUG9pbnRlclRvUGF0aCIsImdldEhhc2giLCJJbnZhbGlkUG9pbnRlckVycm9yIiwic291cmNlIiwiZGVjb2RlVVJJIiwic3RyaXBIYXNoIiwic2V0IiwiaXMkUmVmIiwiJHJlZiIsImxlbmd0aCIsImlzRXh0ZXJuYWwkUmVmIiwiaXNBbGxvd2VkJFJlZiIsInN1YnN0cmluZyIsImV4dGVybmFsIiwiaXNFeHRlbmRlZCRSZWYiLCJrZXlzIiwiZGVyZWZlcmVuY2UiLCJyZXNvbHZlZFZhbHVlIiwibWVyZ2VkIiwia2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/refs.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/refs.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst ref_js_1 = __importDefault(__webpack_require__(/*! ./ref.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js\"));\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst convert_path_to_posix_1 = __importDefault(__webpack_require__(/*! ./util/convert-path-to-posix */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/convert-path-to-posix.js\"));\n/**\n * When you call the resolve method, the value that gets passed to the callback function (or Promise) is a $Refs object. This same object is accessible via the parser.$refs property of $RefParser objects.\n *\n * This object is a map of JSON References and their resolved values. It also has several convenient helper methods that make it easy for you to navigate and manipulate the JSON References.\n *\n * See https://apitools.dev/json-schema-ref-parser/docs/refs.html\n */ class $Refs {\n    /**\n     * Returns the paths/URLs of all the files in your schema (including the main schema file).\n     *\n     * See https://apitools.dev/json-schema-ref-parser/docs/refs.html#pathstypes\n     *\n     * @param types (optional) Optionally only return certain types of paths (\"file\", \"http\", etc.)\n     */ paths(...types) {\n        const paths = getPaths(this._$refs, types);\n        return paths.map((path)=>{\n            return (0, convert_path_to_posix_1.default)(path.decoded);\n        });\n    }\n    /**\n     * Returns a map of paths/URLs and their correspond values.\n     *\n     * See https://apitools.dev/json-schema-ref-parser/docs/refs.html#valuestypes\n     *\n     * @param types (optional) Optionally only return values from certain locations (\"file\", \"http\", etc.)\n     */ values(...types) {\n        const $refs = this._$refs;\n        const paths = getPaths($refs, types);\n        return paths.reduce((obj, path)=>{\n            obj[(0, convert_path_to_posix_1.default)(path.decoded)] = $refs[path.encoded].value;\n            return obj;\n        }, {});\n    }\n    /**\n     * Returns `true` if the given path exists in the schema; otherwise, returns `false`\n     *\n     * See https://apitools.dev/json-schema-ref-parser/docs/refs.html#existsref\n     *\n     * @param $ref The JSON Reference path, optionally with a JSON Pointer in the hash\n     */ /**\n     * Determines whether the given JSON reference exists.\n     *\n     * @param path - The path being resolved, optionally with a JSON pointer in the hash\n     * @param [options]\n     * @returns\n     */ exists(path, options) {\n        try {\n            this._resolve(path, \"\", options);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    /**\n     * Resolves the given JSON reference and returns the resolved value.\n     *\n     * @param path - The path being resolved, with a JSON pointer in the hash\n     * @param [options]\n     * @returns - Returns the resolved value\n     */ get(path, options) {\n        return this._resolve(path, \"\", options).value;\n    }\n    /**\n     * Sets the value at the given path in the schema. If the property, or any of its parents, don't exist, they will be created.\n     *\n     * @param $ref The JSON Reference path, optionally with a JSON Pointer in the hash\n     * @param value The value to assign. Can be anything (object, string, number, etc.)\n     */ set(path, value) {\n        const absPath = url.resolve(this._root$Ref.path, path);\n        const withoutHash = url.stripHash(absPath);\n        const $ref = this._$refs[withoutHash];\n        if (!$ref) {\n            throw (0, ono_1.ono)(`Error resolving $ref pointer \"${path}\". \\n\"${withoutHash}\" not found.`);\n        }\n        $ref.set(absPath, value);\n    }\n    /**\n     * Returns the specified {@link $Ref} object, or undefined.\n     *\n     * @param path - The path being resolved, optionally with a JSON pointer in the hash\n     * @returns\n     * @protected\n     */ _get$Ref(path) {\n        path = url.resolve(this._root$Ref.path, path);\n        const withoutHash = url.stripHash(path);\n        return this._$refs[withoutHash];\n    }\n    /**\n     * Creates a new {@link $Ref} object and adds it to this {@link $Refs} object.\n     *\n     * @param path  - The file path or URL of the referenced file\n     */ _add(path) {\n        const withoutHash = url.stripHash(path);\n        const $ref = new ref_js_1.default(this);\n        $ref.path = withoutHash;\n        this._$refs[withoutHash] = $ref;\n        this._root$Ref = this._root$Ref || $ref;\n        return $ref;\n    }\n    /**\n     * Resolves the given JSON reference.\n     *\n     * @param path - The path being resolved, optionally with a JSON pointer in the hash\n     * @param pathFromRoot - The path of `obj` from the schema root\n     * @param [options]\n     * @returns\n     * @protected\n     */ _resolve(path, pathFromRoot, options) {\n        const absPath = url.resolve(this._root$Ref.path, path);\n        const withoutHash = url.stripHash(absPath);\n        const $ref = this._$refs[withoutHash];\n        if (!$ref) {\n            throw (0, ono_1.ono)(`Error resolving $ref pointer \"${path}\". \\n\"${withoutHash}\" not found.`);\n        }\n        return $ref.resolve(absPath, options, path, pathFromRoot);\n    }\n    constructor(){\n        /**\n         * A map of paths/urls to {@link $Ref} objects\n         *\n         * @type {object}\n         * @protected\n         */ this._$refs = {};\n        /**\n         * Returns the paths of all the files/URLs that are referenced by the JSON schema,\n         * including the schema itself.\n         *\n         * @param [types] - Only return paths of the given types (\"file\", \"http\", etc.)\n         * @returns\n         */ /**\n         * Returns the map of JSON references and their resolved values.\n         *\n         * @param [types] - Only return references of the given types (\"file\", \"http\", etc.)\n         * @returns\n         */ /**\n         * Returns a POJO (plain old JavaScript object) for serialization as JSON.\n         *\n         * @returns {object}\n         */ this.toJSON = this.values;\n        /**\n         * Indicates whether the schema contains any circular references.\n         *\n         * @type {boolean}\n         */ this.circular = false;\n        this._$refs = {};\n        // @ts-ignore\n        this._root$Ref = null;\n    }\n}\nexports[\"default\"] = $Refs;\n/**\n * Returns the encoded and decoded paths keys of the given object.\n *\n * @param $refs - The object whose keys are URL-encoded paths\n * @param [types] - Only return paths of the given types (\"file\", \"http\", etc.)\n * @returns\n */ function getPaths($refs, types) {\n    let paths = Object.keys($refs);\n    // Filter the paths by type\n    types = Array.isArray(types[0]) ? types[0] : Array.prototype.slice.call(types);\n    if (types.length > 0 && types[0]) {\n        paths = paths.filter((key)=>{\n            return types.includes($refs[key].pathType);\n        });\n    }\n    // Decode local filesystem paths\n    return paths.map((path)=>{\n        return {\n            encoded: path,\n            decoded: $refs[path].pathType === \"file\" ? url.toFileSystemPath(path, true) : path\n        };\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/refs.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolve-external.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolve-external.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ref_js_1 = __importDefault(__webpack_require__(/*! ./ref.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/ref.js\"));\nconst pointer_js_1 = __importDefault(__webpack_require__(/*! ./pointer.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/pointer.js\"));\nconst parse_js_1 = __importDefault(__webpack_require__(/*! ./parse.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/parse.js\"));\nconst url = __importStar(__webpack_require__(/*! ./util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst errors_js_1 = __webpack_require__(/*! ./util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nexports[\"default\"] = resolveExternal;\n/**\n * Crawls the JSON schema, finds all external JSON references, and resolves their values.\n * This method does not mutate the JSON schema. The resolved values are added to {@link $RefParser#$refs}.\n *\n * NOTE: We only care about EXTERNAL references here. INTERNAL references are only relevant when dereferencing.\n *\n * @returns\n * The promise resolves once all JSON references in the schema have been resolved,\n * including nested references that are contained in externally-referenced files.\n */ function resolveExternal(parser, options) {\n    if (!options.resolve.external) {\n        // Nothing to resolve, so exit early\n        return Promise.resolve();\n    }\n    try {\n        // console.log('Resolving $ref pointers in %s', parser.$refs._root$Ref.path);\n        const promises = crawl(parser.schema, parser.$refs._root$Ref.path + \"#\", parser.$refs, options);\n        return Promise.all(promises);\n    } catch (e) {\n        return Promise.reject(e);\n    }\n}\n/**\n * Recursively crawls the given value, and resolves any external JSON references.\n *\n * @param obj - The value to crawl. If it's not an object or array, it will be ignored.\n * @param path - The full path of `obj`, possibly with a JSON Pointer in the hash\n * @param {boolean} external - Whether `obj` was found in an external document.\n * @param $refs\n * @param options\n * @param seen - Internal.\n *\n * @returns\n * Returns an array of promises. There will be one promise for each JSON reference in `obj`.\n * If `obj` does not contain any JSON references, then the array will be empty.\n * If any of the JSON references point to files that contain additional JSON references,\n * then the corresponding promise will internally reference an array of promises.\n */ function crawl(obj, path, $refs, options, seen, external) {\n    seen || (seen = new Set());\n    let promises = [];\n    if (obj && typeof obj === \"object\" && !ArrayBuffer.isView(obj) && !seen.has(obj)) {\n        seen.add(obj); // Track previously seen objects to avoid infinite recursion\n        if (ref_js_1.default.isExternal$Ref(obj)) {\n            promises.push(resolve$Ref(obj, path, $refs, options));\n        }\n        const keys = Object.keys(obj);\n        for (const key of keys){\n            const keyPath = pointer_js_1.default.join(path, key);\n            const value = obj[key];\n            promises = promises.concat(crawl(value, keyPath, $refs, options, seen, external));\n        }\n    }\n    return promises;\n}\n/**\n * Resolves the given JSON Reference, and then crawls the resulting value.\n *\n * @param $ref - The JSON Reference to resolve\n * @param path - The full path of `$ref`, possibly with a JSON Pointer in the hash\n * @param $refs\n * @param options\n *\n * @returns\n * The promise resolves once all JSON references in the object have been resolved,\n * including nested references that are contained in externally-referenced files.\n */ async function resolve$Ref($ref, path, $refs, options) {\n    const shouldResolveOnCwd = options.dereference.externalReferenceResolution === \"root\";\n    const resolvedPath = url.resolve(shouldResolveOnCwd ? url.cwd() : path, $ref.$ref);\n    const withoutHash = url.stripHash(resolvedPath);\n    // $ref.$ref = url.relative($refs._root$Ref.path, resolvedPath);\n    // Do we already have this $ref?\n    $ref = $refs._$refs[withoutHash];\n    if ($ref) {\n        // We've already parsed this $ref, so use the existing value\n        return Promise.resolve($ref.value);\n    }\n    // Parse the $referenced file/url\n    try {\n        const result = await (0, parse_js_1.default)(resolvedPath, $refs, options);\n        // Crawl the parsed value\n        // console.log('Resolving $ref pointers in %s', withoutHash);\n        const promises = crawl(result, withoutHash + \"#\", $refs, options, new Set(), true);\n        return Promise.all(promises);\n    } catch (err) {\n        if (!options?.continueOnError || !(0, errors_js_1.isHandledError)(err)) {\n            throw err;\n        }\n        if ($refs._$refs[withoutHash]) {\n            err.source = decodeURI(url.stripHash(path));\n            err.path = url.safePointerToPath(url.getHash(path));\n        }\n        return [];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolve-external.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/file.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/file.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst url = __importStar(__webpack_require__(/*! ../util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nexports[\"default\"] = {\n    /**\n     * The order that this resolver will run, in relation to other resolvers.\n     */ order: 100,\n    /**\n     * Determines whether this resolver can read a given file reference.\n     * Resolvers that return true will be tried, in order, until one successfully resolves the file.\n     * Resolvers that return false will not be given a chance to resolve the file.\n     */ canRead (file) {\n        return url.isFileSystemPath(file.url);\n    },\n    /**\n     * Reads the given file and returns its raw contents as a Buffer.\n     */ async read (file) {\n        let path;\n        try {\n            path = url.toFileSystemPath(file.url);\n        } catch (err) {\n            throw new errors_js_1.ResolverError(ono_1.ono.uri(err, `Malformed URI: ${file.url}`), file.url);\n        }\n        try {\n            const data = await fs_1.promises.readFile(path);\n            return data;\n        } catch (err) {\n            throw new errors_js_1.ResolverError((0, ono_1.ono)(err, `Error opening file \"${path}\"`), path);\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvcmVzb2x2ZXJzL2ZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxxQkFBcUIsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxrQkFBa0IsSUFBTWYsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRWMsQ0FBQztJQUN6RmhCLE9BQU9jLGNBQWMsQ0FBQ1osR0FBRyxXQUFXO1FBQUVVLFlBQVk7UUFBTUssT0FBT0Q7SUFBRTtBQUNyRSxJQUFLLFNBQVNkLENBQUMsRUFBRWMsQ0FBQztJQUNkZCxDQUFDLENBQUMsVUFBVSxHQUFHYztBQUNuQjtBQUNBLElBQUlFLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBVUMsR0FBRztJQUMzRCxJQUFJQSxPQUFPQSxJQUFJVixVQUFVLEVBQUUsT0FBT1U7SUFDbEMsSUFBSUMsU0FBUyxDQUFDO0lBQ2QsSUFBSUQsT0FBTyxNQUFNO1FBQUEsSUFBSyxJQUFJZixLQUFLZSxJQUFLLElBQUlmLE1BQU0sYUFBYUosT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLEtBQUtmLElBQUlMLGdCQUFnQnFCLFFBQVFELEtBQUtmO0lBQUU7SUFDeElXLG1CQUFtQkssUUFBUUQ7SUFDM0IsT0FBT0M7QUFDWDtBQUNBcEIsOENBQTZDO0lBQUVpQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELE1BQU1RLE9BQU9DLG1CQUFPQSxDQUFDLGNBQUk7QUFDekIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUMsMEVBQWlCO0FBQ3ZDLE1BQU1FLE1BQU1WLGFBQWFRLG1CQUFPQSxDQUFDLHFHQUFnQjtBQUNqRCxNQUFNRyxjQUFjSCxtQkFBT0EsQ0FBQywyR0FBbUI7QUFDL0NGLGtCQUFlLEdBQUc7SUFDZDs7S0FFQyxHQUNETyxPQUFPO0lBQ1A7Ozs7S0FJQyxHQUNEQyxTQUFRQyxJQUFJO1FBQ1IsT0FBT0wsSUFBSU0sZ0JBQWdCLENBQUNELEtBQUtMLEdBQUc7SUFDeEM7SUFDQTs7S0FFQyxHQUNELE1BQU1PLE1BQUtGLElBQUk7UUFDWCxJQUFJRztRQUNKLElBQUk7WUFDQUEsT0FBT1IsSUFBSVMsZ0JBQWdCLENBQUNKLEtBQUtMLEdBQUc7UUFDeEMsRUFDQSxPQUFPVSxLQUFLO1lBQ1IsTUFBTSxJQUFJVCxZQUFZVSxhQUFhLENBQUNaLE1BQU1hLEdBQUcsQ0FBQ0MsR0FBRyxDQUFDSCxLQUFLLENBQUMsZUFBZSxFQUFFTCxLQUFLTCxHQUFHLENBQUMsQ0FBQyxHQUFHSyxLQUFLTCxHQUFHO1FBQ2xHO1FBQ0EsSUFBSTtZQUNBLE1BQU1jLE9BQU8sTUFBTWpCLEtBQUtrQixRQUFRLENBQUNDLFFBQVEsQ0FBQ1I7WUFDMUMsT0FBT007UUFDWCxFQUNBLE9BQU9KLEtBQUs7WUFDUixNQUFNLElBQUlULFlBQVlVLGFBQWEsQ0FBQyxDQUFDLEdBQUdaLE1BQU1hLEdBQUcsRUFBRUYsS0FBSyxDQUFDLG9CQUFvQixFQUFFRixLQUFLLENBQUMsQ0FBQyxHQUFHQTtRQUM3RjtJQUNKO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL0BhcGlkZXZ0b29scy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2Rpc3QvbGliL3Jlc29sdmVycy9maWxlLmpzP2JlY2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGZzXzEgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCBvbm9fMSA9IHJlcXVpcmUoXCJAanNkZXZ0b29scy9vbm9cIik7XG5jb25zdCB1cmwgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4uL3V0aWwvdXJsLmpzXCIpKTtcbmNvbnN0IGVycm9yc19qc18xID0gcmVxdWlyZShcIi4uL3V0aWwvZXJyb3JzLmpzXCIpO1xuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICAgIC8qKlxuICAgICAqIFRoZSBvcmRlciB0aGF0IHRoaXMgcmVzb2x2ZXIgd2lsbCBydW4sIGluIHJlbGF0aW9uIHRvIG90aGVyIHJlc29sdmVycy5cbiAgICAgKi9cbiAgICBvcmRlcjogMTAwLFxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgd2hldGhlciB0aGlzIHJlc29sdmVyIGNhbiByZWFkIGEgZ2l2ZW4gZmlsZSByZWZlcmVuY2UuXG4gICAgICogUmVzb2x2ZXJzIHRoYXQgcmV0dXJuIHRydWUgd2lsbCBiZSB0cmllZCwgaW4gb3JkZXIsIHVudGlsIG9uZSBzdWNjZXNzZnVsbHkgcmVzb2x2ZXMgdGhlIGZpbGUuXG4gICAgICogUmVzb2x2ZXJzIHRoYXQgcmV0dXJuIGZhbHNlIHdpbGwgbm90IGJlIGdpdmVuIGEgY2hhbmNlIHRvIHJlc29sdmUgdGhlIGZpbGUuXG4gICAgICovXG4gICAgY2FuUmVhZChmaWxlKSB7XG4gICAgICAgIHJldHVybiB1cmwuaXNGaWxlU3lzdGVtUGF0aChmaWxlLnVybCk7XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBSZWFkcyB0aGUgZ2l2ZW4gZmlsZSBhbmQgcmV0dXJucyBpdHMgcmF3IGNvbnRlbnRzIGFzIGEgQnVmZmVyLlxuICAgICAqL1xuICAgIGFzeW5jIHJlYWQoZmlsZSkge1xuICAgICAgICBsZXQgcGF0aDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBhdGggPSB1cmwudG9GaWxlU3lzdGVtUGF0aChmaWxlLnVybCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLlJlc29sdmVyRXJyb3Iob25vXzEub25vLnVyaShlcnIsIGBNYWxmb3JtZWQgVVJJOiAke2ZpbGUudXJsfWApLCBmaWxlLnVybCk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBmc18xLnByb21pc2VzLnJlYWRGaWxlKHBhdGgpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IGVycm9yc19qc18xLlJlc29sdmVyRXJyb3IoKDAsIG9ub18xLm9ubykoZXJyLCBgRXJyb3Igb3BlbmluZyBmaWxlIFwiJHtwYXRofVwiYCksIHBhdGgpO1xuICAgICAgICB9XG4gICAgfSxcbn07XG4iXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZXhwb3J0cyIsImZzXzEiLCJyZXF1aXJlIiwib25vXzEiLCJ1cmwiLCJlcnJvcnNfanNfMSIsImRlZmF1bHQiLCJvcmRlciIsImNhblJlYWQiLCJmaWxlIiwiaXNGaWxlU3lzdGVtUGF0aCIsInJlYWQiLCJwYXRoIiwidG9GaWxlU3lzdGVtUGF0aCIsImVyciIsIlJlc29sdmVyRXJyb3IiLCJvbm8iLCJ1cmkiLCJkYXRhIiwicHJvbWlzZXMiLCJyZWFkRmlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/file.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/http.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/http.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst url = __importStar(__webpack_require__(/*! ../util/url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\"));\nconst errors_js_1 = __webpack_require__(/*! ../util/errors.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\");\nexports[\"default\"] = {\n    /**\n     * The order that this resolver will run, in relation to other resolvers.\n     */ order: 200,\n    /**\n     * HTTP headers to send when downloading files.\n     *\n     * @example:\n     * {\n     *   \"User-Agent\": \"JSON Schema $Ref Parser\",\n     *   Accept: \"application/json\"\n     * }\n     */ headers: null,\n    /**\n     * HTTP request timeout (in milliseconds).\n     */ timeout: 5000,\n    /**\n     * The maximum number of HTTP redirects to follow.\n     * To disable automatic following of redirects, set this to zero.\n     */ redirects: 5,\n    /**\n     * The `withCredentials` option of XMLHttpRequest.\n     * Set this to `true` if you're downloading files from a CORS-enabled server that requires authentication\n     */ withCredentials: false,\n    /**\n     * Determines whether this resolver can read a given file reference.\n     * Resolvers that return true will be tried in order, until one successfully resolves the file.\n     * Resolvers that return false will not be given a chance to resolve the file.\n     */ canRead (file) {\n        return url.isHttp(file.url);\n    },\n    /**\n     * Reads the given URL and returns its raw contents as a Buffer.\n     */ read (file) {\n        const u = url.parse(file.url);\n        if (false) {}\n        return download(u, this);\n    }\n};\n/**\n * Downloads the given file.\n * @returns\n * The promise resolves with the raw downloaded data, or rejects if there is an HTTP error.\n */ async function download(u, httpOptions, _redirects) {\n    u = url.parse(u);\n    const redirects = _redirects || [];\n    redirects.push(u.href);\n    try {\n        const res = await get(u, httpOptions);\n        if (res.status >= 400) {\n            throw (0, ono_1.ono)({\n                status: res.status\n            }, `HTTP ERROR ${res.status}`);\n        } else if (res.status >= 300) {\n            if (!Number.isNaN(httpOptions.redirects) && redirects.length > httpOptions.redirects) {\n                throw new errors_js_1.ResolverError((0, ono_1.ono)({\n                    status: res.status\n                }, `Error downloading ${redirects[0]}. \\nToo many redirects: \\n  ${redirects.join(\" \\n  \")}`));\n            } else if (!(\"location\" in res.headers) || !res.headers.location) {\n                throw (0, ono_1.ono)({\n                    status: res.status\n                }, `HTTP ${res.status} redirect with no location header`);\n            } else {\n                const redirectTo = url.resolve(u.href, res.headers.location);\n                return download(redirectTo, httpOptions, redirects);\n            }\n        } else {\n            if (res.body) {\n                const buf = await res.arrayBuffer();\n                return Buffer.from(buf);\n            }\n            return Buffer.alloc(0);\n        }\n    } catch (err) {\n        throw new errors_js_1.ResolverError((0, ono_1.ono)(err, `Error downloading ${u.href}`), u.href);\n    }\n}\n/**\n * Sends an HTTP GET request.\n * The promise resolves with the HTTP Response object.\n */ async function get(u, httpOptions) {\n    let controller;\n    let timeoutId;\n    if (httpOptions.timeout) {\n        controller = new AbortController();\n        timeoutId = setTimeout(()=>controller.abort(), httpOptions.timeout);\n    }\n    if (!global.fetch) {\n        const { default: fetch1, Request, Headers } = await Promise.resolve().then(()=>__importStar(__webpack_require__(/*! node-fetch */ \"(ssr)/./node_modules/node-fetch/lib/index.mjs\")));\n        // @ts-ignore\n        global.fetch = fetch1;\n        // @ts-ignore\n        global.Request = Request;\n        // @ts-ignore\n        global.Headers = Headers;\n    }\n    const response = await fetch(u, {\n        method: \"GET\",\n        headers: httpOptions.headers || {},\n        credentials: httpOptions.withCredentials ? \"include\" : \"same-origin\",\n        signal: controller ? controller.signal : null\n    });\n    if (timeoutId) {\n        clearTimeout(timeoutId);\n    }\n    return response;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/resolvers/http.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/convert-path-to-posix.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/convert-path-to-posix.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst path_1 = __importDefault(__webpack_require__(/*! path */ \"path\"));\nfunction convertPathToPosix(filePath) {\n    const isExtendedLengthPath = filePath.startsWith(\"\\\\\\\\?\\\\\");\n    if (isExtendedLengthPath) {\n        return filePath;\n    }\n    return filePath.split(path_1.default.win32.sep).join(path_1.default.posix.sep);\n}\nexports[\"default\"] = convertPathToPosix;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9jb252ZXJ0LXBhdGgtdG8tcG9zaXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0QsTUFBTUMsU0FBU1AsZ0JBQWdCUSxtQkFBT0EsQ0FBQyxrQkFBTTtBQUM3QyxTQUFTQyxtQkFBbUJDLFFBQVE7SUFDaEMsTUFBTUMsdUJBQXVCRCxTQUFTRSxVQUFVLENBQUM7SUFDakQsSUFBSUQsc0JBQXNCO1FBQ3RCLE9BQU9EO0lBQ1g7SUFDQSxPQUFPQSxTQUFTRyxLQUFLLENBQUNOLE9BQU9PLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDQyxHQUFHLEVBQUVDLElBQUksQ0FBQ1YsT0FBT08sT0FBTyxDQUFDSSxLQUFLLENBQUNGLEdBQUc7QUFDakY7QUFDQVgsa0JBQWUsR0FBR0kiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL0BhcGlkZXZ0b29scy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2Rpc3QvbGliL3V0aWwvY29udmVydC1wYXRoLXRvLXBvc2l4LmpzP2NkMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBwYXRoXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuZnVuY3Rpb24gY29udmVydFBhdGhUb1Bvc2l4KGZpbGVQYXRoKSB7XG4gICAgY29uc3QgaXNFeHRlbmRlZExlbmd0aFBhdGggPSBmaWxlUGF0aC5zdGFydHNXaXRoKFwiXFxcXFxcXFw/XFxcXFwiKTtcbiAgICBpZiAoaXNFeHRlbmRlZExlbmd0aFBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGZpbGVQYXRoO1xuICAgIH1cbiAgICByZXR1cm4gZmlsZVBhdGguc3BsaXQocGF0aF8xLmRlZmF1bHQud2luMzIuc2VwKS5qb2luKHBhdGhfMS5kZWZhdWx0LnBvc2l4LnNlcCk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBjb252ZXJ0UGF0aFRvUG9zaXg7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicGF0aF8xIiwicmVxdWlyZSIsImNvbnZlcnRQYXRoVG9Qb3NpeCIsImZpbGVQYXRoIiwiaXNFeHRlbmRlZExlbmd0aFBhdGgiLCJzdGFydHNXaXRoIiwic3BsaXQiLCJkZWZhdWx0Iiwid2luMzIiLCJzZXAiLCJqb2luIiwicG9zaXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/convert-path-to-posix.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.normalizeError = exports.isHandledError = exports.InvalidPointerError = exports.MissingPointerError = exports.UnmatchedResolverError = exports.ResolverError = exports.UnmatchedParserError = exports.ParserError = exports.JSONParserErrorGroup = exports.JSONParserError = void 0;\nconst ono_1 = __webpack_require__(/*! @jsdevtools/ono */ \"(ssr)/./node_modules/@jsdevtools/ono/esm/index.js\");\nconst url_js_1 = __webpack_require__(/*! ./url.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\");\nclass JSONParserError extends Error {\n    constructor(message, source){\n        super();\n        this.code = \"EUNKNOWN\";\n        this.name = \"JSONParserError\";\n        this.message = message;\n        this.source = source;\n        this.path = null;\n        ono_1.Ono.extend(this);\n    }\n    get footprint() {\n        return `${this.path}+${this.source}+${this.code}+${this.message}`;\n    }\n}\nexports.JSONParserError = JSONParserError;\nclass JSONParserErrorGroup extends Error {\n    constructor(parser){\n        super();\n        this.files = parser;\n        this.name = \"JSONParserErrorGroup\";\n        this.message = `${this.errors.length} error${this.errors.length > 1 ? \"s\" : \"\"} occurred while reading '${(0, url_js_1.toFileSystemPath)(parser.$refs._root$Ref.path)}'`;\n        ono_1.Ono.extend(this);\n    }\n    static getParserErrors(parser) {\n        const errors = [];\n        for (const $ref of Object.values(parser.$refs._$refs)){\n            // @ts-expect-error TS(2571): Object is of type 'unknown'.\n            if ($ref.errors) {\n                // @ts-expect-error TS(2571): Object is of type 'unknown'.\n                errors.push(...$ref.errors);\n            }\n        }\n        return errors;\n    }\n    get errors() {\n        return JSONParserErrorGroup.getParserErrors(this.files);\n    }\n}\nexports.JSONParserErrorGroup = JSONParserErrorGroup;\nclass ParserError extends JSONParserError {\n    constructor(message, source){\n        super(`Error parsing ${source}: ${message}`, source);\n        this.code = \"EPARSER\";\n        this.name = \"ParserError\";\n    }\n}\nexports.ParserError = ParserError;\nclass UnmatchedParserError extends JSONParserError {\n    constructor(source){\n        super(`Could not find parser for \"${source}\"`, source);\n        this.code = \"EUNMATCHEDPARSER\";\n        this.name = \"UnmatchedParserError\";\n    }\n}\nexports.UnmatchedParserError = UnmatchedParserError;\nclass ResolverError extends JSONParserError {\n    constructor(ex, source){\n        super(ex.message || `Error reading file \"${source}\"`, source);\n        this.code = \"ERESOLVER\";\n        this.name = \"ResolverError\";\n        if (\"code\" in ex) {\n            this.ioErrorCode = String(ex.code);\n        }\n    }\n}\nexports.ResolverError = ResolverError;\nclass UnmatchedResolverError extends JSONParserError {\n    constructor(source){\n        super(`Could not find resolver for \"${source}\"`, source);\n        this.code = \"EUNMATCHEDRESOLVER\";\n        this.name = \"UnmatchedResolverError\";\n    }\n}\nexports.UnmatchedResolverError = UnmatchedResolverError;\nclass MissingPointerError extends JSONParserError {\n    constructor(token, path){\n        super(`Token \"${token}\" does not exist.`, (0, url_js_1.stripHash)(path));\n        this.code = \"EUNMATCHEDRESOLVER\";\n        this.name = \"MissingPointerError\";\n    }\n}\nexports.MissingPointerError = MissingPointerError;\nclass InvalidPointerError extends JSONParserError {\n    constructor(pointer, path){\n        super(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`, (0, url_js_1.stripHash)(path));\n        this.code = \"EUNMATCHEDRESOLVER\";\n        this.name = \"InvalidPointerError\";\n    }\n}\nexports.InvalidPointerError = InvalidPointerError;\nfunction isHandledError(err) {\n    return err instanceof JSONParserError || err instanceof JSONParserErrorGroup;\n}\nexports.isHandledError = isHandledError;\nfunction normalizeError(err) {\n    if (err.path === null) {\n        err.path = [];\n    }\n    return err;\n}\nexports.normalizeError = normalizeError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/is-windows.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/is-windows.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isWindows = void 0;\nconst isWindowsConst = /^win/.test(globalThis.process ? globalThis.process.platform : \"\");\nconst isWindows = ()=>isWindowsConst;\nexports.isWindows = isWindows;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9pcy13aW5kb3dzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxpQkFBaUIsR0FBRyxLQUFLO0FBQ3pCLE1BQU1HLGlCQUFpQixPQUFPQyxJQUFJLENBQUNDLFdBQVdDLE9BQU8sR0FBR0QsV0FBV0MsT0FBTyxDQUFDQyxRQUFRLEdBQUc7QUFDdEYsTUFBTUwsWUFBWSxJQUFNQztBQUN4QkgsaUJBQWlCLEdBQUdFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdGJvdC11aS8uL25vZGVfbW9kdWxlcy9AYXBpZGV2dG9vbHMvanNvbi1zY2hlbWEtcmVmLXBhcnNlci9kaXN0L2xpYi91dGlsL2lzLXdpbmRvd3MuanM/MWEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNXaW5kb3dzID0gdm9pZCAwO1xuY29uc3QgaXNXaW5kb3dzQ29uc3QgPSAvXndpbi8udGVzdChnbG9iYWxUaGlzLnByb2Nlc3MgPyBnbG9iYWxUaGlzLnByb2Nlc3MucGxhdGZvcm0gOiBcIlwiKTtcbmNvbnN0IGlzV2luZG93cyA9ICgpID0+IGlzV2luZG93c0NvbnN0O1xuZXhwb3J0cy5pc1dpbmRvd3MgPSBpc1dpbmRvd3M7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpc1dpbmRvd3MiLCJpc1dpbmRvd3NDb25zdCIsInRlc3QiLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsInBsYXRmb3JtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/is-windows.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/maybe.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/maybe.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst next_js_1 = __importDefault(__webpack_require__(/*! ./next.js */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/next.js\"));\nfunction maybe(cb, promise) {\n    if (cb) {\n        promise.then(function(result) {\n            (0, next_js_1.default)(function() {\n                cb(null, result);\n            });\n        }, function(err) {\n            (0, next_js_1.default)(function() {\n                cb(err);\n            });\n        });\n        return undefined;\n    } else {\n        return promise;\n    }\n}\nexports[\"default\"] = maybe;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9tYXliZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RCxNQUFNQyxZQUFZUCxnQkFBZ0JRLG1CQUFPQSxDQUFDLGlHQUFXO0FBQ3JELFNBQVNDLE1BQU1DLEVBQUUsRUFBRUMsT0FBTztJQUN0QixJQUFJRCxJQUFJO1FBQ0pDLFFBQVFDLElBQUksQ0FBQyxTQUFVQyxNQUFNO1lBQ3hCLElBQUdOLFVBQVVPLE9BQU8sRUFBRTtnQkFDbkJKLEdBQUcsTUFBTUc7WUFDYjtRQUNKLEdBQUcsU0FBVUUsR0FBRztZQUNYLElBQUdSLFVBQVVPLE9BQU8sRUFBRTtnQkFDbkJKLEdBQUdLO1lBQ1A7UUFDSjtRQUNBLE9BQU9DO0lBQ1gsT0FDSztRQUNELE9BQU9MO0lBQ1g7QUFDSjtBQUNBTixrQkFBZSxHQUFHSSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9tYXliZS5qcz9lNDMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbmV4dF9qc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL25leHQuanNcIikpO1xuZnVuY3Rpb24gbWF5YmUoY2IsIHByb21pc2UpIHtcbiAgICBpZiAoY2IpIHtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICgwLCBuZXh0X2pzXzEuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNiKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgKDAsIG5leHRfanNfMS5kZWZhdWx0KShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IG1heWJlO1xuIl0sIm5hbWVzIjpbIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsIl9fZXNNb2R1bGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIm5leHRfanNfMSIsInJlcXVpcmUiLCJtYXliZSIsImNiIiwicHJvbWlzZSIsInRoZW4iLCJyZXN1bHQiLCJkZWZhdWx0IiwiZXJyIiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/maybe.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/next.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/next.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nfunction makeNext() {\n    if (typeof process === \"object\" && typeof process.nextTick === \"function\") {\n        return process.nextTick;\n    } else if (typeof setImmediate === \"function\") {\n        return setImmediate;\n    } else {\n        return function next(f) {\n            setTimeout(f, 0);\n        };\n    }\n}\nexports[\"default\"] = makeNext();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9uZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdELFNBQVNDO0lBQ0wsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBT0EsUUFBUUMsUUFBUSxLQUFLLFlBQVk7UUFDdkUsT0FBT0QsUUFBUUMsUUFBUTtJQUMzQixPQUNLLElBQUksT0FBT0MsaUJBQWlCLFlBQVk7UUFDekMsT0FBT0E7SUFDWCxPQUNLO1FBQ0QsT0FBTyxTQUFTQyxLQUFLQyxDQUFDO1lBQ2xCQyxXQUFXRCxHQUFHO1FBQ2xCO0lBQ0o7QUFDSjtBQUNBUCxrQkFBZSxHQUFHRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRib3QtdWkvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9uZXh0LmpzPzVlZGUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBtYWtlTmV4dCgpIHtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHByb2Nlc3MubmV4dFRpY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljaztcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBzZXRJbW1lZGlhdGU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gbmV4dChmKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGYsIDApO1xuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IG1ha2VOZXh0KCk7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtYWtlTmV4dCIsInByb2Nlc3MiLCJuZXh0VGljayIsInNldEltbWVkaWF0ZSIsIm5leHQiLCJmIiwic2V0VGltZW91dCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/next.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/plugins.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/plugins.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.run = exports.sort = exports.filter = exports.all = void 0;\n/**\n * Returns the given plugins as an array, rather than an object map.\n * All other methods in this module expect an array of plugins rather than an object map.\n *\n * @returns\n */ function all(plugins) {\n    return Object.keys(plugins).filter((key)=>{\n        return typeof plugins[key] === \"object\";\n    }).map((key)=>{\n        plugins[key].name = key;\n        return plugins[key];\n    });\n}\nexports.all = all;\n/**\n * Filters the given plugins, returning only the ones return `true` for the given method.\n */ function filter(plugins, method, file) {\n    return plugins.filter((plugin)=>{\n        return !!getResult(plugin, method, file);\n    });\n}\nexports.filter = filter;\n/**\n * Sorts the given plugins, in place, by their `order` property.\n */ function sort(plugins) {\n    for (const plugin of plugins){\n        plugin.order = plugin.order || Number.MAX_SAFE_INTEGER;\n    }\n    return plugins.sort((a, b)=>{\n        return a.order - b.order;\n    });\n}\nexports.sort = sort;\n/**\n * Runs the specified method of the given plugins, in order, until one of them returns a successful result.\n * Each method can return a synchronous value, a Promise, or call an error-first callback.\n * If the promise resolves successfully, or the callback is called without an error, then the result\n * is immediately returned and no further plugins are called.\n * If the promise rejects, or the callback is called with an error, then the next plugin is called.\n * If ALL plugins fail, then the last error is thrown.\n */ async function run(plugins, method, file, $refs) {\n    let plugin;\n    let lastError;\n    let index = 0;\n    return new Promise((resolve, reject)=>{\n        runNextPlugin();\n        function runNextPlugin() {\n            plugin = plugins[index++];\n            if (!plugin) {\n                // There are no more functions, so re-throw the last error\n                return reject(lastError);\n            }\n            try {\n                // console.log('  %s', plugin.name);\n                const result = getResult(plugin, method, file, callback, $refs);\n                if (result && typeof result.then === \"function\") {\n                    // A promise was returned\n                    result.then(onSuccess, onError);\n                } else if (result !== undefined) {\n                    // A synchronous result was returned\n                    onSuccess(result);\n                } else if (index === plugins.length) {\n                    throw new Error(\"No promise has been returned or callback has been called.\");\n                }\n            } catch (e) {\n                onError(e);\n            }\n        }\n        function callback(err, result) {\n            if (err) {\n                onError(err);\n            } else {\n                onSuccess(result);\n            }\n        }\n        function onSuccess(result) {\n            // console.log('    success');\n            resolve({\n                plugin,\n                result\n            });\n        }\n        function onError(error) {\n            // console.log('    %s', err.message || err);\n            lastError = {\n                plugin,\n                error\n            };\n            runNextPlugin();\n        }\n    });\n}\nexports.run = run;\n/**\n * Returns the value of the given property.\n * If the property is a function, then the result of the function is returned.\n * If the value is a RegExp, then it will be tested against the file URL.\n * If the value is an array, then it will be compared against the file extension.\n */ function getResult(obj, prop, file, callback, $refs) {\n    const value = obj[prop];\n    if (typeof value === \"function\") {\n        return value.apply(obj, [\n            file,\n            callback,\n            $refs\n        ]);\n    }\n    if (!callback) {\n        // The synchronous plugin functions (canParse and canRead)\n        // allow a \"shorthand\" syntax, where the user can match\n        // files by RegExp or by file extension.\n        if (value instanceof RegExp) {\n            return value.test(file.url);\n        } else if (typeof value === \"string\") {\n            return value === file.extension;\n        } else if (Array.isArray(value)) {\n            return value.indexOf(file.extension) !== -1;\n        }\n    }\n    return value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGFwaWRldnRvb2xzL2pzb24tc2NoZW1hLXJlZi1wYXJzZXIvZGlzdC9saWIvdXRpbC9wbHVnaW5zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxXQUFXLEdBQUdBLFlBQVksR0FBR0EsY0FBYyxHQUFHQSxXQUFXLEdBQUcsS0FBSztBQUNqRTs7Ozs7Q0FLQyxHQUNELFNBQVNLLElBQUlDLE9BQU87SUFDaEIsT0FBT1IsT0FBT1MsSUFBSSxDQUFDRCxTQUNkRixNQUFNLENBQUMsQ0FBQ0k7UUFDVCxPQUFPLE9BQU9GLE9BQU8sQ0FBQ0UsSUFBSSxLQUFLO0lBQ25DLEdBQ0tDLEdBQUcsQ0FBQyxDQUFDRDtRQUNORixPQUFPLENBQUNFLElBQUksQ0FBQ0UsSUFBSSxHQUFHRjtRQUNwQixPQUFPRixPQUFPLENBQUNFLElBQUk7SUFDdkI7QUFDSjtBQUNBUixXQUFXLEdBQUdLO0FBQ2Q7O0NBRUMsR0FDRCxTQUFTRCxPQUFPRSxPQUFPLEVBQUVLLE1BQU0sRUFBRUMsSUFBSTtJQUNqQyxPQUFPTixRQUFRRixNQUFNLENBQUMsQ0FBQ1M7UUFDbkIsT0FBTyxDQUFDLENBQUNDLFVBQVVELFFBQVFGLFFBQVFDO0lBQ3ZDO0FBQ0o7QUFDQVosY0FBYyxHQUFHSTtBQUNqQjs7Q0FFQyxHQUNELFNBQVNELEtBQUtHLE9BQU87SUFDakIsS0FBSyxNQUFNTyxVQUFVUCxRQUFTO1FBQzFCTyxPQUFPRSxLQUFLLEdBQUdGLE9BQU9FLEtBQUssSUFBSUMsT0FBT0MsZ0JBQWdCO0lBQzFEO0lBQ0EsT0FBT1gsUUFBUUgsSUFBSSxDQUFDLENBQUNlLEdBQUdDO1FBQ3BCLE9BQU9ELEVBQUVILEtBQUssR0FBR0ksRUFBRUosS0FBSztJQUM1QjtBQUNKO0FBQ0FmLFlBQVksR0FBR0c7QUFDZjs7Ozs7OztDQU9DLEdBQ0QsZUFBZUQsSUFBSUksT0FBTyxFQUFFSyxNQUFNLEVBQUVDLElBQUksRUFBRVEsS0FBSztJQUMzQyxJQUFJUDtJQUNKLElBQUlRO0lBQ0osSUFBSUMsUUFBUTtJQUNaLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUN6QkM7UUFDQSxTQUFTQTtZQUNMYixTQUFTUCxPQUFPLENBQUNnQixRQUFRO1lBQ3pCLElBQUksQ0FBQ1QsUUFBUTtnQkFDVCwwREFBMEQ7Z0JBQzFELE9BQU9ZLE9BQU9KO1lBQ2xCO1lBQ0EsSUFBSTtnQkFDQSxvQ0FBb0M7Z0JBQ3BDLE1BQU1NLFNBQVNiLFVBQVVELFFBQVFGLFFBQVFDLE1BQU1nQixVQUFVUjtnQkFDekQsSUFBSU8sVUFBVSxPQUFPQSxPQUFPRSxJQUFJLEtBQUssWUFBWTtvQkFDN0MseUJBQXlCO29CQUN6QkYsT0FBT0UsSUFBSSxDQUFDQyxXQUFXQztnQkFDM0IsT0FDSyxJQUFJSixXQUFXSyxXQUFXO29CQUMzQixvQ0FBb0M7b0JBQ3BDRixVQUFVSDtnQkFDZCxPQUNLLElBQUlMLFVBQVVoQixRQUFRMkIsTUFBTSxFQUFFO29CQUMvQixNQUFNLElBQUlDLE1BQU07Z0JBQ3BCO1lBQ0osRUFDQSxPQUFPQyxHQUFHO2dCQUNOSixRQUFRSTtZQUNaO1FBQ0o7UUFDQSxTQUFTUCxTQUFTUSxHQUFHLEVBQUVULE1BQU07WUFDekIsSUFBSVMsS0FBSztnQkFDTEwsUUFBUUs7WUFDWixPQUNLO2dCQUNETixVQUFVSDtZQUNkO1FBQ0o7UUFDQSxTQUFTRyxVQUFVSCxNQUFNO1lBQ3JCLDhCQUE4QjtZQUM5QkgsUUFBUTtnQkFDSlg7Z0JBQ0FjO1lBQ0o7UUFDSjtRQUNBLFNBQVNJLFFBQVFNLEtBQUs7WUFDbEIsNkNBQTZDO1lBQzdDaEIsWUFBWTtnQkFDUlI7Z0JBQ0F3QjtZQUNKO1lBQ0FYO1FBQ0o7SUFDSjtBQUNKO0FBQ0ExQixXQUFXLEdBQUdFO0FBQ2Q7Ozs7O0NBS0MsR0FDRCxTQUFTWSxVQUFVd0IsR0FBRyxFQUFFQyxJQUFJLEVBQUUzQixJQUFJLEVBQUVnQixRQUFRLEVBQUVSLEtBQUs7SUFDL0MsTUFBTW5CLFFBQVFxQyxHQUFHLENBQUNDLEtBQUs7SUFDdkIsSUFBSSxPQUFPdEMsVUFBVSxZQUFZO1FBQzdCLE9BQU9BLE1BQU11QyxLQUFLLENBQUNGLEtBQUs7WUFBQzFCO1lBQU1nQjtZQUFVUjtTQUFNO0lBQ25EO0lBQ0EsSUFBSSxDQUFDUSxVQUFVO1FBQ1gsMERBQTBEO1FBQzFELHVEQUF1RDtRQUN2RCx3Q0FBd0M7UUFDeEMsSUFBSTNCLGlCQUFpQndDLFFBQVE7WUFDekIsT0FBT3hDLE1BQU15QyxJQUFJLENBQUM5QixLQUFLK0IsR0FBRztRQUM5QixPQUNLLElBQUksT0FBTzFDLFVBQVUsVUFBVTtZQUNoQyxPQUFPQSxVQUFVVyxLQUFLZ0MsU0FBUztRQUNuQyxPQUNLLElBQUlDLE1BQU1DLE9BQU8sQ0FBQzdDLFFBQVE7WUFDM0IsT0FBT0EsTUFBTThDLE9BQU8sQ0FBQ25DLEtBQUtnQyxTQUFTLE1BQU0sQ0FBQztRQUM5QztJQUNKO0lBQ0EsT0FBTzNDO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Ym90LXVpLy4vbm9kZV9tb2R1bGVzL0BhcGlkZXZ0b29scy9qc29uLXNjaGVtYS1yZWYtcGFyc2VyL2Rpc3QvbGliL3V0aWwvcGx1Z2lucy5qcz9mZWU3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ydW4gPSBleHBvcnRzLnNvcnQgPSBleHBvcnRzLmZpbHRlciA9IGV4cG9ydHMuYWxsID0gdm9pZCAwO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBnaXZlbiBwbHVnaW5zIGFzIGFuIGFycmF5LCByYXRoZXIgdGhhbiBhbiBvYmplY3QgbWFwLlxuICogQWxsIG90aGVyIG1ldGhvZHMgaW4gdGhpcyBtb2R1bGUgZXhwZWN0IGFuIGFycmF5IG9mIHBsdWdpbnMgcmF0aGVyIHRoYW4gYW4gb2JqZWN0IG1hcC5cbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBhbGwocGx1Z2lucykge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhwbHVnaW5zKVxuICAgICAgICAuZmlsdGVyKChrZXkpID0+IHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBwbHVnaW5zW2tleV0gPT09IFwib2JqZWN0XCI7XG4gICAgfSlcbiAgICAgICAgLm1hcCgoa2V5KSA9PiB7XG4gICAgICAgIHBsdWdpbnNba2V5XS5uYW1lID0ga2V5O1xuICAgICAgICByZXR1cm4gcGx1Z2luc1trZXldO1xuICAgIH0pO1xufVxuZXhwb3J0cy5hbGwgPSBhbGw7XG4vKipcbiAqIEZpbHRlcnMgdGhlIGdpdmVuIHBsdWdpbnMsIHJldHVybmluZyBvbmx5IHRoZSBvbmVzIHJldHVybiBgdHJ1ZWAgZm9yIHRoZSBnaXZlbiBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGZpbHRlcihwbHVnaW5zLCBtZXRob2QsIGZpbGUpIHtcbiAgICByZXR1cm4gcGx1Z2lucy5maWx0ZXIoKHBsdWdpbikgPT4ge1xuICAgICAgICByZXR1cm4gISFnZXRSZXN1bHQocGx1Z2luLCBtZXRob2QsIGZpbGUpO1xuICAgIH0pO1xufVxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXI7XG4vKipcbiAqIFNvcnRzIHRoZSBnaXZlbiBwbHVnaW5zLCBpbiBwbGFjZSwgYnkgdGhlaXIgYG9yZGVyYCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gc29ydChwbHVnaW5zKSB7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucykge1xuICAgICAgICBwbHVnaW4ub3JkZXIgPSBwbHVnaW4ub3JkZXIgfHwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuICAgIHJldHVybiBwbHVnaW5zLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIGEub3JkZXIgLSBiLm9yZGVyO1xuICAgIH0pO1xufVxuZXhwb3J0cy5zb3J0ID0gc29ydDtcbi8qKlxuICogUnVucyB0aGUgc3BlY2lmaWVkIG1ldGhvZCBvZiB0aGUgZ2l2ZW4gcGx1Z2lucywgaW4gb3JkZXIsIHVudGlsIG9uZSBvZiB0aGVtIHJldHVybnMgYSBzdWNjZXNzZnVsIHJlc3VsdC5cbiAqIEVhY2ggbWV0aG9kIGNhbiByZXR1cm4gYSBzeW5jaHJvbm91cyB2YWx1ZSwgYSBQcm9taXNlLCBvciBjYWxsIGFuIGVycm9yLWZpcnN0IGNhbGxiYWNrLlxuICogSWYgdGhlIHByb21pc2UgcmVzb2x2ZXMgc3VjY2Vzc2Z1bGx5LCBvciB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkIHdpdGhvdXQgYW4gZXJyb3IsIHRoZW4gdGhlIHJlc3VsdFxuICogaXMgaW1tZWRpYXRlbHkgcmV0dXJuZWQgYW5kIG5vIGZ1cnRoZXIgcGx1Z2lucyBhcmUgY2FsbGVkLlxuICogSWYgdGhlIHByb21pc2UgcmVqZWN0cywgb3IgdGhlIGNhbGxiYWNrIGlzIGNhbGxlZCB3aXRoIGFuIGVycm9yLCB0aGVuIHRoZSBuZXh0IHBsdWdpbiBpcyBjYWxsZWQuXG4gKiBJZiBBTEwgcGx1Z2lucyBmYWlsLCB0aGVuIHRoZSBsYXN0IGVycm9yIGlzIHRocm93bi5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gcnVuKHBsdWdpbnMsIG1ldGhvZCwgZmlsZSwgJHJlZnMpIHtcbiAgICBsZXQgcGx1Z2luO1xuICAgIGxldCBsYXN0RXJyb3I7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBydW5OZXh0UGx1Z2luKCk7XG4gICAgICAgIGZ1bmN0aW9uIHJ1bk5leHRQbHVnaW4oKSB7XG4gICAgICAgICAgICBwbHVnaW4gPSBwbHVnaW5zW2luZGV4KytdO1xuICAgICAgICAgICAgaWYgKCFwbHVnaW4pIHtcbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBhcmUgbm8gbW9yZSBmdW5jdGlvbnMsIHNvIHJlLXRocm93IHRoZSBsYXN0IGVycm9yXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChsYXN0RXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnICAlcycsIHBsdWdpbi5uYW1lKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBnZXRSZXN1bHQocGx1Z2luLCBtZXRob2QsIGZpbGUsIGNhbGxiYWNrLCAkcmVmcyk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIHByb21pc2Ugd2FzIHJldHVybmVkXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEEgc3luY2hyb25vdXMgcmVzdWx0IHdhcyByZXR1cm5lZFxuICAgICAgICAgICAgICAgICAgICBvblN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5kZXggPT09IHBsdWdpbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHByb21pc2UgaGFzIGJlZW4gcmV0dXJuZWQgb3IgY2FsbGJhY2sgaGFzIGJlZW4gY2FsbGVkLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FsbGJhY2soZXJyLCByZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBvblN1Y2Nlc3MocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvblN1Y2Nlc3MocmVzdWx0KSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnICAgIHN1Y2Nlc3MnKTtcbiAgICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBvbkVycm9yKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnICAgICVzJywgZXJyLm1lc3NhZ2UgfHwgZXJyKTtcbiAgICAgICAgICAgIGxhc3RFcnJvciA9IHtcbiAgICAgICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcnVuTmV4dFBsdWdpbigpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLnJ1biA9IHJ1bjtcbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIHByb3BlcnR5LlxuICogSWYgdGhlIHByb3BlcnR5IGlzIGEgZnVuY3Rpb24sIHRoZW4gdGhlIHJlc3VsdCBvZiB0aGUgZnVuY3Rpb24gaXMgcmV0dXJuZWQuXG4gKiBJZiB0aGUgdmFsdWUgaXMgYSBSZWdFeHAsIHRoZW4gaXQgd2lsbCBiZSB0ZXN0ZWQgYWdhaW5zdCB0aGUgZmlsZSBVUkwuXG4gKiBJZiB0aGUgdmFsdWUgaXMgYW4gYXJyYXksIHRoZW4gaXQgd2lsbCBiZSBjb21wYXJlZCBhZ2FpbnN0IHRoZSBmaWxlIGV4dGVuc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0UmVzdWx0KG9iaiwgcHJvcCwgZmlsZSwgY2FsbGJhY2ssICRyZWZzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBvYmpbcHJvcF07XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5hcHBseShvYmosIFtmaWxlLCBjYWxsYmFjaywgJHJlZnNdKTtcbiAgICB9XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgICAvLyBUaGUgc3luY2hyb25vdXMgcGx1Z2luIGZ1bmN0aW9ucyAoY2FuUGFyc2UgYW5kIGNhblJlYWQpXG4gICAgICAgIC8vIGFsbG93IGEgXCJzaG9ydGhhbmRcIiBzeW50YXgsIHdoZXJlIHRoZSB1c2VyIGNhbiBtYXRjaFxuICAgICAgICAvLyBmaWxlcyBieSBSZWdFeHAgb3IgYnkgZmlsZSBleHRlbnNpb24uXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnRlc3QoZmlsZS51cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBmaWxlLmV4dGVuc2lvbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmluZGV4T2YoZmlsZS5leHRlbnNpb24pICE9PSAtMTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJydW4iLCJzb3J0IiwiZmlsdGVyIiwiYWxsIiwicGx1Z2lucyIsImtleXMiLCJrZXkiLCJtYXAiLCJuYW1lIiwibWV0aG9kIiwiZmlsZSIsInBsdWdpbiIsImdldFJlc3VsdCIsIm9yZGVyIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImEiLCJiIiwiJHJlZnMiLCJsYXN0RXJyb3IiLCJpbmRleCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicnVuTmV4dFBsdWdpbiIsInJlc3VsdCIsImNhbGxiYWNrIiwidGhlbiIsIm9uU3VjY2VzcyIsIm9uRXJyb3IiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJFcnJvciIsImUiLCJlcnIiLCJlcnJvciIsIm9iaiIsInByb3AiLCJhcHBseSIsIlJlZ0V4cCIsInRlc3QiLCJ1cmwiLCJleHRlbnNpb24iLCJBcnJheSIsImlzQXJyYXkiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/plugins.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.relative = exports.safePointerToPath = exports.toFileSystemPath = exports.fromFileSystemPath = exports.isFileSystemPath = exports.isHttp = exports.stripHash = exports.getHash = exports.stripQuery = exports.getExtension = exports.getProtocol = exports.cwd = exports.resolve = exports.parse = void 0;\nconst convert_path_to_posix_1 = __importDefault(__webpack_require__(/*! ./convert-path-to-posix */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/convert-path-to-posix.js\"));\nconst path_1 = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst forwardSlashPattern = /\\//g;\nconst protocolPattern = /^(\\w{2,}):\\/\\//i;\nconst jsonPointerSlash = /~1/g;\nconst jsonPointerTilde = /~0/g;\nconst path_2 = __webpack_require__(/*! path */ \"path\");\nconst is_windows_1 = __webpack_require__(/*! ./is-windows */ \"(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/is-windows.js\");\nconst projectDir = (0, path_2.join)(__dirname, \"..\", \"..\");\n// RegExp patterns to URL-encode special characters in local filesystem paths\nconst urlEncodePatterns = [\n    /\\?/g,\n    \"%3F\",\n    /#/g,\n    \"%23\"\n];\n// RegExp patterns to URL-decode special characters for local filesystem paths\nconst urlDecodePatterns = [\n    /%23/g,\n    \"#\",\n    /%24/g,\n    \"$\",\n    /%26/g,\n    \"&\",\n    /%2C/g,\n    \",\",\n    /%40/g,\n    \"@\"\n];\nconst parse = (u)=>new URL(u);\nexports.parse = parse;\n/**\n * Returns resolved target URL relative to a base URL in a manner similar to that of a Web browser resolving an anchor tag HREF.\n *\n * @returns\n */ function resolve(from, to) {\n    const fromUrl = new URL((0, convert_path_to_posix_1.default)(from), \"resolve://\");\n    const resolvedUrl = new URL((0, convert_path_to_posix_1.default)(to), fromUrl);\n    if (resolvedUrl.protocol === \"resolve:\") {\n        // `from` is a relative URL.\n        const { pathname, search, hash } = resolvedUrl;\n        return pathname + search + hash;\n    }\n    return resolvedUrl.toString();\n}\nexports.resolve = resolve;\n/**\n * Returns the current working directory (in Node) or the current page URL (in browsers).\n *\n * @returns\n */ function cwd() {\n    if (false) {}\n    const path = process.cwd();\n    const lastChar = path.slice(-1);\n    if (lastChar === \"/\" || lastChar === \"\\\\\") {\n        return path;\n    } else {\n        return path + \"/\";\n    }\n}\nexports.cwd = cwd;\n/**\n * Returns the protocol of the given URL, or `undefined` if it has no protocol.\n *\n * @param path\n * @returns\n */ function getProtocol(path) {\n    const match = protocolPattern.exec(path || \"\");\n    if (match) {\n        return match[1].toLowerCase();\n    }\n}\nexports.getProtocol = getProtocol;\n/**\n * Returns the lowercased file extension of the given URL,\n * or an empty string if it has no extension.\n *\n * @param path\n * @returns\n */ function getExtension(path) {\n    const lastDot = path.lastIndexOf(\".\");\n    if (lastDot >= 0) {\n        return stripQuery(path.substr(lastDot).toLowerCase());\n    }\n    return \"\";\n}\nexports.getExtension = getExtension;\n/**\n * Removes the query, if any, from the given path.\n *\n * @param path\n * @returns\n */ function stripQuery(path) {\n    const queryIndex = path.indexOf(\"?\");\n    if (queryIndex >= 0) {\n        path = path.substr(0, queryIndex);\n    }\n    return path;\n}\nexports.stripQuery = stripQuery;\n/**\n * Returns the hash (URL fragment), of the given path.\n * If there is no hash, then the root hash (\"#\") is returned.\n *\n * @param path\n * @returns\n */ function getHash(path) {\n    const hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n        return path.substr(hashIndex);\n    }\n    return \"#\";\n}\nexports.getHash = getHash;\n/**\n * Removes the hash (URL fragment), if any, from the given path.\n *\n * @param path\n * @returns\n */ function stripHash(path) {\n    const hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n        path = path.substr(0, hashIndex);\n    }\n    return path;\n}\nexports.stripHash = stripHash;\n/**\n * Determines whether the given path is an HTTP(S) URL.\n *\n * @param path\n * @returns\n */ function isHttp(path) {\n    const protocol = getProtocol(path);\n    if (protocol === \"http\" || protocol === \"https\") {\n        return true;\n    } else if (protocol === undefined) {\n        // There is no protocol.  If we're running in a browser, then assume it's HTTP.\n        return \"undefined\" !== \"undefined\";\n    } else {\n        // It's some other protocol, such as \"ftp://\", \"mongodb://\", etc.\n        return false;\n    }\n}\nexports.isHttp = isHttp;\n/**\n * Determines whether the given path is a filesystem path.\n * This includes \"file://\" URLs.\n *\n * @param path\n * @returns\n */ function isFileSystemPath(path) {\n    // @ts-ignore\n    if (false) {}\n    const protocol = getProtocol(path);\n    return protocol === undefined || protocol === \"file\";\n}\nexports.isFileSystemPath = isFileSystemPath;\n/**\n * Converts a filesystem path to a properly-encoded URL.\n *\n * This is intended to handle situations where JSON Schema $Ref Parser is called\n * with a filesystem path that contains characters which are not allowed in URLs.\n *\n * @example\n * The following filesystem paths would be converted to the following URLs:\n *\n *    <\"!@#$%^&*+=?'>.json              ==>   %3C%22!@%23$%25%5E&*+=%3F\\'%3E.json\n *    C:\\\\My Documents\\\\File (1).json   ==>   C:/My%20Documents/File%20(1).json\n *    file://Project #42/file.json      ==>   file://Project%20%2342/file.json\n *\n * @param path\n * @returns\n */ function fromFileSystemPath(path) {\n    // Step 1: On Windows, replace backslashes with forward slashes,\n    // rather than encoding them as \"%5C\"\n    if ((0, is_windows_1.isWindows)()) {\n        const upperPath = path.toUpperCase();\n        const projectDirPosixPath = (0, convert_path_to_posix_1.default)(projectDir);\n        const posixUpper = projectDirPosixPath.toUpperCase();\n        const hasProjectDir = upperPath.includes(posixUpper);\n        const hasProjectUri = upperPath.includes(posixUpper);\n        const isAbsolutePath = path_1.win32.isAbsolute(path);\n        if (!(hasProjectDir || hasProjectUri || isAbsolutePath)) {\n            path = (0, path_2.join)(projectDir, path);\n        }\n        path = (0, convert_path_to_posix_1.default)(path);\n    }\n    // Step 2: `encodeURI` will take care of MOST characters\n    path = encodeURI(path);\n    // Step 3: Manually encode characters that are not encoded by `encodeURI`.\n    // This includes characters such as \"#\" and \"?\", which have special meaning in URLs,\n    // but are just normal characters in a filesystem path.\n    for(let i = 0; i < urlEncodePatterns.length; i += 2){\n        path = path.replace(urlEncodePatterns[i], urlEncodePatterns[i + 1]);\n    }\n    return path;\n}\nexports.fromFileSystemPath = fromFileSystemPath;\n/**\n * Converts a URL to a local filesystem path.\n */ function toFileSystemPath(path, keepFileProtocol) {\n    // Step 1: `decodeURI` will decode characters such as Cyrillic characters, spaces, etc.\n    path = decodeURI(path);\n    // Step 2: Manually decode characters that are not decoded by `decodeURI`.\n    // This includes characters such as \"#\" and \"?\", which have special meaning in URLs,\n    // but are just normal characters in a filesystem path.\n    for(let i = 0; i < urlDecodePatterns.length; i += 2){\n        path = path.replace(urlDecodePatterns[i], urlDecodePatterns[i + 1]);\n    }\n    // Step 3: If it's a \"file://\" URL, then format it consistently\n    // or convert it to a local filesystem path\n    let isFileUrl = path.substr(0, 7).toLowerCase() === \"file://\";\n    if (isFileUrl) {\n        // Strip-off the protocol, and the initial \"/\", if there is one\n        path = path[7] === \"/\" ? path.substr(8) : path.substr(7);\n        // insert a colon (\":\") after the drive letter on Windows\n        if ((0, is_windows_1.isWindows)() && path[1] === \"/\") {\n            path = path[0] + \":\" + path.substr(1);\n        }\n        if (keepFileProtocol) {\n            // Return the consistently-formatted \"file://\" URL\n            path = \"file:///\" + path;\n        } else {\n            // Convert the \"file://\" URL to a local filesystem path.\n            // On Windows, it will start with something like \"C:/\".\n            // On Posix, it will start with \"/\"\n            isFileUrl = false;\n            path = (0, is_windows_1.isWindows)() ? path : \"/\" + path;\n        }\n    }\n    // Step 4: Normalize Windows paths (unless it's a \"file://\" URL)\n    if ((0, is_windows_1.isWindows)() && !isFileUrl) {\n        // Replace forward slashes with backslashes\n        path = path.replace(forwardSlashPattern, \"\\\\\");\n        // Capitalize the drive letter\n        if (path.substr(1, 2) === \":\\\\\") {\n            path = path[0].toUpperCase() + path.substr(1);\n        }\n    }\n    return path;\n}\nexports.toFileSystemPath = toFileSystemPath;\n/**\n * Converts a $ref pointer to a valid JSON Path.\n *\n * @param pointer\n * @returns\n */ function safePointerToPath(pointer) {\n    if (pointer.length <= 1 || pointer[0] !== \"#\" || pointer[1] !== \"/\") {\n        return [];\n    }\n    return pointer.slice(2).split(\"/\").map((value)=>{\n        return decodeURIComponent(value).replace(jsonPointerSlash, \"/\").replace(jsonPointerTilde, \"~\");\n    });\n}\nexports.safePointerToPath = safePointerToPath;\nfunction relative(from, to) {\n    if (!isFileSystemPath(from) || !isFileSystemPath(to)) {\n        return resolve(from, to);\n    }\n    const fromDir = path_1.default.dirname(stripHash(from));\n    const toPath = stripHash(to);\n    const result = path_1.default.relative(fromDir, toPath);\n    return result + getHash(to);\n}\nexports.relative = relative;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@apidevtools/json-schema-ref-parser/dist/lib/util/url.js\n");

/***/ })

};
;