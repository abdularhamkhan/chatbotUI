"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rfc4648";
exports.ids = ["vendor-chunks/rfc4648"];
exports.modules = {

/***/ "(ssr)/./node_modules/rfc4648/lib/rfc4648.js":
/*!*********************************************!*\
  !*** ./node_modules/rfc4648/lib/rfc4648.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base16: () => (/* binding */ base16),\n/* harmony export */   base32: () => (/* binding */ base32),\n/* harmony export */   base32hex: () => (/* binding */ base32hex),\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   codec: () => (/* binding */ codec)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */ function parse(string, encoding, opts) {\n    var _opts$out;\n    if (opts === void 0) {\n        opts = {};\n    }\n    // Build the character lookup table:\n    if (!encoding.codes) {\n        encoding.codes = {};\n        for(var i = 0; i < encoding.chars.length; ++i){\n            encoding.codes[encoding.chars[i]] = i;\n        }\n    } // The string must have a whole number of bytes:\n    if (!opts.loose && string.length * encoding.bits & 7) {\n        throw new SyntaxError(\"Invalid padding\");\n    } // Count the padding bytes:\n    var end = string.length;\n    while(string[end - 1] === \"=\"){\n        --end; // If we get a whole number of bytes, there is too much padding:\n        if (!opts.loose && !((string.length - end) * encoding.bits & 7)) {\n            throw new SyntaxError(\"Invalid padding\");\n        }\n    } // Allocate the output:\n    var out = new ((_opts$out = opts.out) != null ? _opts$out : Uint8Array)(end * encoding.bits / 8 | 0); // Parse the data:\n    var bits = 0; // Number of bits currently in the buffer\n    var buffer = 0; // Bits waiting to be written out, MSB first\n    var written = 0; // Next byte to write\n    for(var _i = 0; _i < end; ++_i){\n        // Read one character from the string:\n        var value = encoding.codes[string[_i]];\n        if (value === undefined) {\n            throw new SyntaxError(\"Invalid character \" + string[_i]);\n        } // Append the bits to the buffer:\n        buffer = buffer << encoding.bits | value;\n        bits += encoding.bits; // Write out some bits if the buffer has a byte's worth:\n        if (bits >= 8) {\n            bits -= 8;\n            out[written++] = 0xff & buffer >> bits;\n        }\n    } // Verify that we have received just enough bits:\n    if (bits >= encoding.bits || 0xff & buffer << 8 - bits) {\n        throw new SyntaxError(\"Unexpected end of data\");\n    }\n    return out;\n}\nfunction stringify(data, encoding, opts) {\n    if (opts === void 0) {\n        opts = {};\n    }\n    var _opts = opts, _opts$pad = _opts.pad, pad = _opts$pad === void 0 ? true : _opts$pad;\n    var mask = (1 << encoding.bits) - 1;\n    var out = \"\";\n    var bits = 0; // Number of bits currently in the buffer\n    var buffer = 0; // Bits waiting to be written out, MSB first\n    for(var i = 0; i < data.length; ++i){\n        // Slurp data into the buffer:\n        buffer = buffer << 8 | 0xff & data[i];\n        bits += 8; // Write out as much as we can:\n        while(bits > encoding.bits){\n            bits -= encoding.bits;\n            out += encoding.chars[mask & buffer >> bits];\n        }\n    } // Partial character:\n    if (bits) {\n        out += encoding.chars[mask & buffer << encoding.bits - bits];\n    } // Add padding characters until we hit a byte boundary:\n    if (pad) {\n        while(out.length * encoding.bits & 7){\n            out += \"=\";\n        }\n    }\n    return out;\n}\n/* eslint-disable @typescript-eslint/strict-boolean-expressions */ var base16Encoding = {\n    chars: \"0123456789ABCDEF\",\n    bits: 4\n};\nvar base32Encoding = {\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n    bits: 5\n};\nvar base32HexEncoding = {\n    chars: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n    bits: 5\n};\nvar base64Encoding = {\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n    bits: 6\n};\nvar base64UrlEncoding = {\n    chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n    bits: 6\n};\nvar base16 = {\n    parse: function parse$1(string, opts) {\n        return parse(string.toUpperCase(), base16Encoding, opts);\n    },\n    stringify: function stringify$1(data, opts) {\n        return stringify(data, base16Encoding, opts);\n    }\n};\nvar base32 = {\n    parse: function parse$1(string, opts) {\n        if (opts === void 0) {\n            opts = {};\n        }\n        return parse(opts.loose ? string.toUpperCase().replace(/0/g, \"O\").replace(/1/g, \"L\").replace(/8/g, \"B\") : string, base32Encoding, opts);\n    },\n    stringify: function stringify$1(data, opts) {\n        return stringify(data, base32Encoding, opts);\n    }\n};\nvar base32hex = {\n    parse: function parse$1(string, opts) {\n        return parse(string, base32HexEncoding, opts);\n    },\n    stringify: function stringify$1(data, opts) {\n        return stringify(data, base32HexEncoding, opts);\n    }\n};\nvar base64 = {\n    parse: function parse$1(string, opts) {\n        return parse(string, base64Encoding, opts);\n    },\n    stringify: function stringify$1(data, opts) {\n        return stringify(data, base64Encoding, opts);\n    }\n};\nvar base64url = {\n    parse: function parse$1(string, opts) {\n        return parse(string, base64UrlEncoding, opts);\n    },\n    stringify: function stringify$1(data, opts) {\n        return stringify(data, base64UrlEncoding, opts);\n    }\n};\nvar codec = {\n    parse: parse,\n    stringify: stringify\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rfc4648/lib/rfc4648.js\n");

/***/ })

};
;