"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/./node_modules/@vercel/edge-config/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@vercel/edge-config/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   digest: () => (/* binding */ digest),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAll: () => (/* binding */ getAll),\n/* harmony export */   has: () => (/* binding */ has),\n/* harmony export */   parseConnectionString: () => (/* binding */ parseConnectionString)\n/* harmony export */ });\n/* harmony import */ var _vercel_edge_config_fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vercel/edge-config-fs */ \"node:fs/promises\");\n// src/index.ts\n\n// package.json\nvar name = \"@vercel/edge-config\";\nvar version = \"0.4.1\";\n// src/utils/index.ts\nvar ERRORS = {\n    UNEXPECTED: \"@vercel/edge-config: Unexpected error\",\n    UNAUTHORIZED: \"@vercel/edge-config: Unauthorized\",\n    NETWORK: \"@vercel/edge-config: Network error\",\n    EDGE_CONFIG_NOT_FOUND: \"@vercel/edge-config: Edge Config not found\"\n};\nfunction hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nfunction pick(obj, keys) {\n    const ret = {};\n    keys.forEach((key)=>{\n        ret[key] = obj[key];\n    });\n    return ret;\n}\nfunction assertIsKey(key) {\n    if (typeof key !== \"string\") {\n        throw new Error(\"@vercel/edge-config: Expected key to be a string\");\n    }\n}\nfunction assertIsKeys(keys) {\n    if (!Array.isArray(keys) || keys.some((key)=>typeof key !== \"string\")) {\n        throw new Error(\"@vercel/edge-config: Expected keys to be an array of string\");\n    }\n}\nfunction clone(value) {\n    if (typeof structuredClone === \"function\") return structuredClone(value);\n    if (value === void 0) return value;\n    return JSON.parse(JSON.stringify(value));\n}\nfunction parseVercelConnectionString(text) {\n    try {\n        const url = new URL(text);\n        if (url.host !== \"edge-config.vercel.com\") return null;\n        if (url.protocol !== \"https:\") return null;\n        if (!url.pathname.startsWith(\"/ecfg\")) return null;\n        const id = url.pathname.split(\"/\")[1];\n        if (!id) return null;\n        const token = url.searchParams.get(\"token\");\n        if (!token || token === \"\") return null;\n        return {\n            type: \"vercel\",\n            baseUrl: `https://edge-config.vercel.com/${id}`,\n            id,\n            version: \"1\",\n            token\n        };\n    } catch  {\n        return null;\n    }\n}\nfunction parseExternalConnectionString(connectionString) {\n    try {\n        const url = new URL(connectionString);\n        let id = url.searchParams.get(\"id\");\n        const token = url.searchParams.get(\"token\");\n        const version2 = url.searchParams.get(\"version\") || \"1\";\n        if (!id || url.pathname.startsWith(\"/ecfg_\")) {\n            id = url.pathname.split(\"/\")[1] || null;\n        }\n        if (!id || !token) return null;\n        url.search = \"\";\n        return {\n            type: \"external\",\n            baseUrl: url.toString(),\n            id,\n            token,\n            version: version2\n        };\n    } catch  {\n        return null;\n    }\n}\nfunction parseConnectionString(connectionString) {\n    const connection = parseVercelConnectionString(connectionString);\n    if (connection) return connection;\n    return parseExternalConnectionString(connectionString);\n}\nvar isDynamicServerError = (error)=>error instanceof Error && hasOwnProperty(error, \"digest\") && error.digest === \"DYNAMIC_SERVER_USAGE\";\n// src/utils/fetch-with-cached-response.ts\nfunction createResponse(cachedResponseEntry) {\n    return new Response(cachedResponseEntry.response, {\n        headers: {\n            ...cachedResponseEntry.headers,\n            Age: String(// age header may not be 0 when serving stale content, must be >= 1\n            Math.max(1, Math.floor((Date.now() - cachedResponseEntry.time) / 1e3)))\n        },\n        status: cachedResponseEntry.status\n    });\n}\nfunction createHandleStaleIfError(cachedResponseEntry, staleIfError) {\n    return function handleStaleIfError(response) {\n        switch(response.status){\n            case 500:\n            case 502:\n            case 503:\n            case 504:\n                return typeof staleIfError === \"number\" && cachedResponseEntry.time < Date.now() + staleIfError * 1e3 ? createResponse(cachedResponseEntry) : response;\n            default:\n                return response;\n        }\n    };\n}\nfunction createHandleStaleIfErrorException(cachedResponseEntry, staleIfError) {\n    return function handleStaleIfError(reason) {\n        if (typeof staleIfError === \"number\" && cachedResponseEntry.time < Date.now() + staleIfError * 1e3) {\n            return createResponse(cachedResponseEntry);\n        }\n        throw reason;\n    };\n}\nvar cache = /* @__PURE__ */ new Map();\nfunction extractStaleIfError(cacheControlHeader) {\n    if (!cacheControlHeader) return null;\n    const matched = /stale-if-error=(?<staleIfError>\\d+)/i.exec(cacheControlHeader);\n    return (matched == null ? void 0 : matched.groups) ? Number(matched.groups.staleIfError) : null;\n}\nasync function fetchWithCachedResponse(url, options = {}) {\n    const { headers: customHeaders = new Headers(), ...customOptions } = options;\n    const authHeader = customHeaders.get(\"Authorization\");\n    const cacheKey = `${url},${authHeader || \"\"}`;\n    const cachedResponseEntry = cache.get(cacheKey);\n    if (cachedResponseEntry) {\n        const { etag: etag2, response: cachedResponse } = cachedResponseEntry;\n        const headers = new Headers(customHeaders);\n        headers.set(\"If-None-Match\", etag2);\n        const staleIfError = extractStaleIfError(headers.get(\"Cache-Control\"));\n        const res2 = await fetch(url, {\n            ...customOptions,\n            headers\n        }).then(createHandleStaleIfError(cachedResponseEntry, staleIfError), createHandleStaleIfErrorException(cachedResponseEntry, staleIfError));\n        if (res2.status === 304) {\n            res2.cachedResponseBody = JSON.parse(cachedResponse);\n            return res2;\n        }\n        const newETag = res2.headers.get(\"ETag\");\n        if (res2.ok && newETag) cache.set(cacheKey, {\n            etag: newETag,\n            response: await res2.clone().text(),\n            headers: Object.fromEntries(res2.headers.entries()),\n            status: res2.status,\n            time: Date.now()\n        });\n        return res2;\n    }\n    const res = await fetch(url, options);\n    const etag = res.headers.get(\"ETag\");\n    if (res.ok && etag) {\n        cache.set(cacheKey, {\n            etag,\n            response: await res.clone().text(),\n            headers: Object.fromEntries(res.headers.entries()),\n            status: res.status,\n            time: Date.now()\n        });\n    }\n    return res;\n}\n// src/index.ts\nasync function getFileSystemEdgeConfig(connection) {\n    if (connection.type !== \"vercel\") return null;\n    if (!process.env.AWS_LAMBDA_FUNCTION_NAME) return null;\n    try {\n        const content = await (0,_vercel_edge_config_fs__WEBPACK_IMPORTED_MODULE_0__.readFile)(`/opt/edge-config/${connection.id}.json`, \"utf-8\");\n        return JSON.parse(content);\n    } catch  {\n        return null;\n    }\n}\nasync function consumeResponseBodyInNodeJsRuntimeToPreventMemoryLeak(res) {\n    if (typeof EdgeRuntime !== \"undefined\") return;\n    await res.arrayBuffer();\n}\nfunction createClient(connectionString, options = {\n    staleIfError: 604800\n}) {\n    if (!connectionString) throw new Error(\"@vercel/edge-config: No connection string provided\");\n    const connection = parseConnectionString(connectionString);\n    if (!connection) throw new Error(\"@vercel/edge-config: Invalid connection string provided\");\n    const baseUrl = connection.baseUrl;\n    const version2 = connection.version;\n    const headers = {\n        Authorization: `Bearer ${connection.token}`\n    };\n    if (typeof process !== \"undefined\" && process.env.VERCEL_ENV) headers[\"x-edge-config-vercel-env\"] = process.env.VERCEL_ENV;\n    if (typeof name === \"string\" && typeof version === \"string\") headers[\"x-edge-config-sdk\"] = `${name}@${version}`;\n    if (typeof options.staleIfError === \"number\" && options.staleIfError > 0) headers[\"cache-control\"] = `stale-if-error=${options.staleIfError}`;\n    return {\n        connection,\n        async get (key) {\n            const localEdgeConfig = await getFileSystemEdgeConfig(connection);\n            if (localEdgeConfig) {\n                assertIsKey(key);\n                return Promise.resolve(clone(localEdgeConfig.items[key]));\n            }\n            assertIsKey(key);\n            return fetchWithCachedResponse(`${baseUrl}/item/${key}?version=${version2}`, {\n                headers: new Headers(headers),\n                cache: \"no-store\"\n            }).then(async (res)=>{\n                if (res.ok) return res.json();\n                await consumeResponseBodyInNodeJsRuntimeToPreventMemoryLeak(res);\n                if (res.status === 401) throw new Error(ERRORS.UNAUTHORIZED);\n                if (res.status === 404) {\n                    if (res.headers.has(\"x-edge-config-digest\")) return void 0;\n                    throw new Error(ERRORS.EDGE_CONFIG_NOT_FOUND);\n                }\n                if (res.cachedResponseBody !== void 0) return res.cachedResponseBody;\n                throw new Error(ERRORS.UNEXPECTED);\n            }, (error)=>{\n                if (isDynamicServerError(error)) throw error;\n                throw new Error(ERRORS.NETWORK);\n            });\n        },\n        async has (key) {\n            const localEdgeConfig = await getFileSystemEdgeConfig(connection);\n            if (localEdgeConfig) {\n                assertIsKey(key);\n                return Promise.resolve(hasOwnProperty(localEdgeConfig.items, key));\n            }\n            assertIsKey(key);\n            return fetch(`${baseUrl}/item/${key}?version=${version2}`, {\n                method: \"HEAD\",\n                headers: new Headers(headers),\n                cache: \"no-store\"\n            }).then((res)=>{\n                if (res.status === 401) throw new Error(ERRORS.UNAUTHORIZED);\n                if (res.status === 404) {\n                    if (res.headers.has(\"x-edge-config-digest\")) return false;\n                    throw new Error(ERRORS.EDGE_CONFIG_NOT_FOUND);\n                }\n                if (res.ok) return true;\n                throw new Error(ERRORS.UNEXPECTED);\n            }, (error)=>{\n                if (isDynamicServerError(error)) throw error;\n                throw new Error(ERRORS.NETWORK);\n            });\n        },\n        async getAll (keys) {\n            const localEdgeConfig = await getFileSystemEdgeConfig(connection);\n            if (localEdgeConfig) {\n                if (keys === void 0) {\n                    return Promise.resolve(clone(localEdgeConfig.items));\n                }\n                assertIsKeys(keys);\n                return Promise.resolve(clone(pick(localEdgeConfig.items, keys)));\n            }\n            if (Array.isArray(keys)) assertIsKeys(keys);\n            const search = Array.isArray(keys) ? new URLSearchParams(keys.map((key)=>[\n                    \"key\",\n                    key\n                ])).toString() : null;\n            if (search === \"\") return Promise.resolve({});\n            return fetchWithCachedResponse(`${baseUrl}/items?version=${version2}${search === null ? \"\" : `&${search}`}`, {\n                headers: new Headers(headers),\n                cache: \"no-store\"\n            }).then(async (res)=>{\n                if (res.ok) return res.json();\n                await consumeResponseBodyInNodeJsRuntimeToPreventMemoryLeak(res);\n                if (res.status === 401) throw new Error(ERRORS.UNAUTHORIZED);\n                if (res.status === 404) throw new Error(ERRORS.EDGE_CONFIG_NOT_FOUND);\n                if (res.cachedResponseBody !== void 0) return res.cachedResponseBody;\n                throw new Error(ERRORS.UNEXPECTED);\n            }, (error)=>{\n                if (isDynamicServerError(error)) throw error;\n                throw new Error(ERRORS.NETWORK);\n            });\n        },\n        async digest () {\n            const localEdgeConfig = await getFileSystemEdgeConfig(connection);\n            if (localEdgeConfig) {\n                return Promise.resolve(localEdgeConfig.digest);\n            }\n            return fetchWithCachedResponse(`${baseUrl}/digest?version=${version2}`, {\n                headers: new Headers(headers),\n                cache: \"no-store\"\n            }).then(async (res)=>{\n                if (res.ok) return res.json();\n                await consumeResponseBodyInNodeJsRuntimeToPreventMemoryLeak(res);\n                if (res.cachedResponseBody !== void 0) return res.cachedResponseBody;\n                throw new Error(ERRORS.UNEXPECTED);\n            }, (error)=>{\n                if (isDynamicServerError(error)) throw error;\n                throw new Error(ERRORS.NETWORK);\n            });\n        }\n    };\n}\nvar defaultEdgeConfigClient;\nfunction init() {\n    if (!defaultEdgeConfigClient) {\n        defaultEdgeConfigClient = createClient(process.env.EDGE_CONFIG);\n    }\n}\nvar get = (...args)=>{\n    init();\n    return defaultEdgeConfigClient.get(...args);\n};\nvar getAll = (...args)=>{\n    init();\n    return defaultEdgeConfigClient.getAll(...args);\n};\nvar has = (...args)=>{\n    init();\n    return defaultEdgeConfigClient.has(...args);\n};\nvar digest = (...args)=>{\n    init();\n    return defaultEdgeConfigClient.digest(...args);\n};\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/edge-config/dist/index.js\n");

/***/ })

};
;