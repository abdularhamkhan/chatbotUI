"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[locale]/[workspaceid]/layout",{

/***/ "(app-pages-browser)/./components/chat/chat-helpers/index.ts":
/*!***********************************************!*\
  !*** ./components/chat/chat-helpers/index.ts ***!
  \***********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createTempMessages: function() { return /* binding */ createTempMessages; },\n/* harmony export */   fetchChatResponse: function() { return /* binding */ fetchChatResponse; },\n/* harmony export */   handleCreateChat: function() { return /* binding */ handleCreateChat; },\n/* harmony export */   handleCreateMessages: function() { return /* binding */ handleCreateMessages; },\n/* harmony export */   handleHostedChat: function() { return /* binding */ handleHostedChat; },\n/* harmony export */   handleLocalChat: function() { return /* binding */ handleLocalChat; },\n/* harmony export */   handleRetrieval: function() { return /* binding */ handleRetrieval; },\n/* harmony export */   processResponse: function() { return /* binding */ processResponse; },\n/* harmony export */   validateChatSettings: function() { return /* binding */ validateChatSettings; }\n/* harmony export */ });\n/* harmony import */ var _db_chat_files__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/db/chat-files */ \"(app-pages-browser)/./db/chat-files.ts\");\n/* harmony import */ var _db_chats__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/db/chats */ \"(app-pages-browser)/./db/chats.ts\");\n/* harmony import */ var _db_message_file_items__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/db/message-file-items */ \"(app-pages-browser)/./db/message-file-items.ts\");\n/* harmony import */ var _db_messages__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/db/messages */ \"(app-pages-browser)/./db/messages.ts\");\n/* harmony import */ var _db_storage_message_images__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/db/storage/message-images */ \"(app-pages-browser)/./db/storage/message-images.ts\");\n/* harmony import */ var _lib_build_prompt__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/build-prompt */ \"(app-pages-browser)/./lib/build-prompt.ts\");\n/* harmony import */ var _lib_consume_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/consume-stream */ \"(app-pages-browser)/./lib/consume-stream.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n// Only used in use-chat-handler.tsx to keep it clean\n\n\n\n\n\n\n\n\n\n\nconst validateChatSettings = (chatSettings, modelData, profile, selectedWorkspace, messageContent)=>{\n    if (!chatSettings) {\n        throw new Error(\"Chat settings not found\");\n    }\n    if (!modelData) {\n        throw new Error(\"Model not found\");\n    }\n    if (!profile) {\n        throw new Error(\"Profile not found\");\n    }\n    if (!selectedWorkspace) {\n        throw new Error(\"Workspace not found\");\n    }\n    if (!messageContent) {\n        throw new Error(\"Message content not found\");\n    }\n};\nconst handleRetrieval = async (userInput, newMessageFiles, chatFiles, embeddingsProvider, sourceCount)=>{\n    const response = await fetch(\"/api/retrieval/retrieve\", {\n        method: \"POST\",\n        body: JSON.stringify({\n            userInput,\n            fileIds: [\n                ...newMessageFiles,\n                ...chatFiles\n            ].map((file)=>file.id),\n            embeddingsProvider,\n            sourceCount\n        })\n    });\n    if (!response.ok) {\n        console.error(\"Error retrieving:\", response);\n    }\n    const { results } = await response.json();\n    return results;\n};\nconst createTempMessages = (messageContent, chatMessages, chatSettings, b64Images, isRegeneration, setChatMessages, selectedAssistant)=>{\n    let tempUserChatMessage = {\n        message: {\n            chat_id: \"\",\n            assistant_id: null,\n            content: messageContent,\n            created_at: \"\",\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(),\n            image_paths: b64Images,\n            model: chatSettings.model,\n            role: \"user\",\n            sequence_number: chatMessages.length,\n            updated_at: \"\",\n            user_id: \"\"\n        },\n        fileItems: []\n    };\n    let tempAssistantChatMessage = {\n        message: {\n            chat_id: \"\",\n            assistant_id: (selectedAssistant === null || selectedAssistant === void 0 ? void 0 : selectedAssistant.id) || null,\n            content: \"\",\n            created_at: \"\",\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])(),\n            image_paths: [],\n            model: chatSettings.model,\n            role: \"assistant\",\n            sequence_number: chatMessages.length + 1,\n            updated_at: \"\",\n            user_id: \"\"\n        },\n        fileItems: []\n    };\n    let newMessages = [];\n    if (isRegeneration) {\n        const lastMessageIndex = chatMessages.length - 1;\n        chatMessages[lastMessageIndex].message.content = \"\";\n        newMessages = [\n            ...chatMessages\n        ];\n    } else {\n        newMessages = [\n            ...chatMessages,\n            tempUserChatMessage,\n            tempAssistantChatMessage\n        ];\n    }\n    setChatMessages(newMessages);\n    return {\n        tempUserChatMessage,\n        tempAssistantChatMessage\n    };\n};\nconst handleLocalChat = async (payload, profile, chatSettings, tempAssistantMessage, isRegeneration, newAbortController, setIsGenerating, setFirstTokenReceived, setChatMessages, setToolInUse)=>{\n    const formattedMessages = await (0,_lib_build_prompt__WEBPACK_IMPORTED_MODULE_5__.buildFinalMessages)(payload, profile, []);\n    // Ollama API: https://github.com/jmorganca/ollama/blob/main/docs/api.md\n    const response = await fetchChatResponse(\"127.0.0.1:11434\" + \"/api/chat\", {\n        model: chatSettings.model,\n        messages: formattedMessages,\n        options: {\n            temperature: payload.chatSettings.temperature\n        }\n    }, false, newAbortController, setIsGenerating, setChatMessages);\n    return await processResponse(response, isRegeneration ? payload.chatMessages[payload.chatMessages.length - 1] : tempAssistantMessage, false, newAbortController, setFirstTokenReceived, setChatMessages, setToolInUse);\n};\nconst handleHostedChat = async (payload, profile, modelData, tempAssistantChatMessage, isRegeneration, newAbortController, newMessageImages, chatImages, setIsGenerating, setFirstTokenReceived, setChatMessages, setToolInUse)=>{\n    const provider = modelData.provider === \"openai\" && profile.use_azure_openai ? \"azure\" : modelData.provider;\n    let draftMessages = await (0,_lib_build_prompt__WEBPACK_IMPORTED_MODULE_5__.buildFinalMessages)(payload, profile, chatImages);\n    let formattedMessages = [];\n    if (provider === \"google\") {\n        formattedMessages = await (0,_lib_build_prompt__WEBPACK_IMPORTED_MODULE_5__.adaptMessagesForGoogleGemini)(payload, draftMessages);\n    } else {\n        formattedMessages = draftMessages;\n    }\n    const apiEndpoint = provider === \"custom\" ? \"/api/chat/custom\" : \"/api/chat/\".concat(provider);\n    const requestBody = {\n        chatSettings: payload.chatSettings,\n        messages: formattedMessages,\n        customModelId: provider === \"custom\" ? modelData.hostedId : \"\"\n    };\n    const response = await fetchChatResponse(apiEndpoint, requestBody, true, newAbortController, setIsGenerating, setChatMessages);\n    return await processResponse(response, isRegeneration ? payload.chatMessages[payload.chatMessages.length - 1] : tempAssistantChatMessage, true, newAbortController, setFirstTokenReceived, setChatMessages, setToolInUse);\n};\nconst fetchChatResponse = async (url, body, isHosted, controller, setIsGenerating, setChatMessages)=>{\n    const response = await fetch(url, {\n        method: \"POST\",\n        body: JSON.stringify(body),\n        signal: controller.signal\n    });\n    if (!response.ok) {\n        if (response.status === 404 && !isHosted) {\n            sonner__WEBPACK_IMPORTED_MODULE_8__.toast.error(\"Model not found. Make sure you have it downloaded via Ollama.\");\n        }\n        const errorData = await response.json();\n        sonner__WEBPACK_IMPORTED_MODULE_8__.toast.error(errorData.message);\n        setIsGenerating(false);\n        setChatMessages((prevMessages)=>prevMessages.slice(0, -2));\n    }\n    return response;\n};\nconst processResponse = async (response, lastChatMessage, isHosted, controller, setFirstTokenReceived, setChatMessages, setToolInUse)=>{\n    let fullText = \"\";\n    let contentToAdd = \"\";\n    if (response.body) {\n        await (0,_lib_consume_stream__WEBPACK_IMPORTED_MODULE_6__.consumeReadableStream)(response.body, (chunk)=>{\n            setFirstTokenReceived(true);\n            setToolInUse(\"none\");\n            try {\n                contentToAdd = isHosted ? chunk : // objects. A chunk may have more than one of these objects, so we\n                // need to split the chunk by new-lines and handle each one\n                // separately.\n                chunk.trimEnd().split(\"\\n\").reduce((acc, line)=>acc + JSON.parse(line).message.content, \"\");\n                fullText += contentToAdd;\n            } catch (error) {\n                console.error(\"Error parsing JSON:\", error);\n            }\n            setChatMessages((prev)=>prev.map((chatMessage)=>{\n                    if (chatMessage.message.id === lastChatMessage.message.id) {\n                        const updatedChatMessage = {\n                            message: {\n                                ...chatMessage.message,\n                                content: fullText\n                            },\n                            fileItems: chatMessage.fileItems\n                        };\n                        return updatedChatMessage;\n                    }\n                    return chatMessage;\n                }));\n        }, controller.signal);\n        return fullText;\n    } else {\n        throw new Error(\"Response body is null\");\n    }\n};\nconst handleCreateChat = async (chatSettings, profile, selectedWorkspace, messageContent, selectedAssistant, newMessageFiles, setSelectedChat, setChats, setChatFiles)=>{\n    const createdChat = await (0,_db_chats__WEBPACK_IMPORTED_MODULE_1__.createChat)({\n        user_id: profile.user_id,\n        workspace_id: selectedWorkspace.id,\n        assistant_id: (selectedAssistant === null || selectedAssistant === void 0 ? void 0 : selectedAssistant.id) || null,\n        context_length: chatSettings.contextLength,\n        include_profile_context: chatSettings.includeProfileContext,\n        include_workspace_instructions: chatSettings.includeWorkspaceInstructions,\n        model: chatSettings.model,\n        name: messageContent.substring(0, 100),\n        prompt: chatSettings.prompt,\n        temperature: chatSettings.temperature,\n        embeddings_provider: chatSettings.embeddingsProvider\n    });\n    setSelectedChat(createdChat);\n    setChats((chats)=>[\n            createdChat,\n            ...chats\n        ]);\n    await (0,_db_chat_files__WEBPACK_IMPORTED_MODULE_0__.createChatFiles)(newMessageFiles.map((file)=>({\n            user_id: profile.user_id,\n            chat_id: createdChat.id,\n            file_id: file.id\n        })));\n    setChatFiles((prev)=>[\n            ...prev,\n            ...newMessageFiles\n        ]);\n    return createdChat;\n};\nconst handleCreateMessages = async (chatMessages, currentChat, profile, modelData, messageContent, generatedText, newMessageImages, isRegeneration, retrievedFileItems, setChatMessages, setChatFileItems, setChatImages, selectedAssistant)=>{\n    const finalUserMessage = {\n        chat_id: currentChat.id,\n        assistant_id: null,\n        user_id: profile.user_id,\n        content: messageContent,\n        model: modelData.modelId,\n        role: \"user\",\n        sequence_number: chatMessages.length,\n        image_paths: []\n    };\n    const finalAssistantMessage = {\n        chat_id: currentChat.id,\n        assistant_id: (selectedAssistant === null || selectedAssistant === void 0 ? void 0 : selectedAssistant.id) || null,\n        user_id: profile.user_id,\n        content: generatedText,\n        model: modelData.modelId,\n        role: \"assistant\",\n        sequence_number: chatMessages.length + 1,\n        image_paths: []\n    };\n    let finalChatMessages = [];\n    if (isRegeneration) {\n        const lastStartingMessage = chatMessages[chatMessages.length - 1].message;\n        const updatedMessage = await (0,_db_messages__WEBPACK_IMPORTED_MODULE_3__.updateMessage)(lastStartingMessage.id, {\n            ...lastStartingMessage,\n            content: generatedText\n        });\n        chatMessages[chatMessages.length - 1].message = updatedMessage;\n        finalChatMessages = [\n            ...chatMessages\n        ];\n        setChatMessages(finalChatMessages);\n    } else {\n        const createdMessages = await (0,_db_messages__WEBPACK_IMPORTED_MODULE_3__.createMessages)([\n            finalUserMessage,\n            finalAssistantMessage\n        ]);\n        // Upload each image (stored in newMessageImages) for the user message to message_images bucket\n        const uploadPromises = newMessageImages.filter((obj)=>obj.file !== null).map((obj)=>{\n            let filePath = \"\".concat(profile.user_id, \"/\").concat(currentChat.id, \"/\").concat(createdMessages[0].id, \"/\").concat((0,uuid__WEBPACK_IMPORTED_MODULE_9__[\"default\"])());\n            return (0,_db_storage_message_images__WEBPACK_IMPORTED_MODULE_4__.uploadMessageImage)(filePath, obj.file).catch((error)=>{\n                console.error(\"Failed to upload image at \".concat(filePath, \":\"), error);\n                return null;\n            });\n        });\n        const paths = (await Promise.all(uploadPromises)).filter(Boolean);\n        setChatImages((prevImages)=>[\n                ...prevImages,\n                ...newMessageImages.map((obj, index)=>({\n                        ...obj,\n                        messageId: createdMessages[0].id,\n                        path: paths[index]\n                    }))\n            ]);\n        const updatedMessage = await (0,_db_messages__WEBPACK_IMPORTED_MODULE_3__.updateMessage)(createdMessages[0].id, {\n            ...createdMessages[0],\n            image_paths: paths\n        });\n        const createdMessageFileItems = await (0,_db_message_file_items__WEBPACK_IMPORTED_MODULE_2__.createMessageFileItems)(retrievedFileItems.map((fileItem)=>{\n            return {\n                user_id: profile.user_id,\n                message_id: createdMessages[1].id,\n                file_item_id: fileItem.id\n            };\n        }));\n        finalChatMessages = [\n            ...chatMessages,\n            {\n                message: updatedMessage,\n                fileItems: []\n            },\n            {\n                message: createdMessages[1],\n                fileItems: retrievedFileItems.map((fileItem)=>fileItem.id)\n            }\n        ];\n        setChatFileItems((prevFileItems)=>{\n            const newFileItems = retrievedFileItems.filter((fileItem)=>!prevFileItems.some((prevItem)=>prevItem.id === fileItem.id));\n            return [\n                ...prevFileItems,\n                ...newFileItems\n            ];\n        });\n        setChatMessages(finalChatMessages);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/chat/chat-helpers/index.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./lib/models/fetch-models.ts":
/*!************************************!*\
  !*** ./lib/models/fetch-models.ts ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchHostedModels: function() { return /* binding */ fetchHostedModels; },\n/* harmony export */   fetchOllamaModels: function() { return /* binding */ fetchOllamaModels; },\n/* harmony export */   fetchOpenRouterModels: function() { return /* binding */ fetchOpenRouterModels; }\n/* harmony export */ });\n/* harmony import */ var sonner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sonner */ \"(app-pages-browser)/./node_modules/sonner/dist/index.mjs\");\n/* harmony import */ var _llm_llm_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./llm/llm-list */ \"(app-pages-browser)/./lib/models/llm/llm-list.ts\");\n\n\nconst fetchHostedModels = async (profile)=>{\n    try {\n        const providers = [\n            \"google\",\n            \"anthropic\",\n            \"mistral\",\n            \"groq\",\n            \"perplexity\"\n        ];\n        if (profile.use_azure_openai) {\n            providers.push(\"azure\");\n        } else {\n            providers.push(\"openai\");\n        }\n        const response = await fetch(\"/api/keys\");\n        if (!response.ok) {\n            throw new Error(\"Server is not responding.\");\n        }\n        const data = await response.json();\n        let modelsToAdd = [];\n        for (const provider of providers){\n            let providerKey;\n            if (provider === \"google\") {\n                providerKey = \"google_gemini_api_key\";\n            } else if (provider === \"azure\") {\n                providerKey = \"azure_openai_api_key\";\n            } else {\n                providerKey = \"\".concat(provider, \"_api_key\");\n            }\n            if ((profile === null || profile === void 0 ? void 0 : profile[providerKey]) || data.isUsingEnvKeyMap[provider]) {\n                const models = _llm_llm_list__WEBPACK_IMPORTED_MODULE_1__.LLM_LIST_MAP[provider];\n                if (Array.isArray(models)) {\n                    modelsToAdd.push(...models);\n                }\n            }\n        }\n        return {\n            envKeyMap: data.isUsingEnvKeyMap,\n            hostedModels: modelsToAdd\n        };\n    } catch (error) {\n        console.warn(\"Error fetching hosted models: \" + error);\n    }\n};\nconst fetchOllamaModels = async ()=>{\n    try {\n        const response = await fetch(\"127.0.0.1:11434\" + \"/api/tags\");\n        if (!response.ok) {\n            throw new Error(\"Ollama server is not responding.\");\n        }\n        const data = await response.json();\n        const localModels = data.models.map((model)=>({\n                modelId: model.name,\n                modelName: model.name,\n                provider: \"ollama\",\n                hostedId: model.name,\n                platformLink: \"https://ollama.ai/library\",\n                imageInput: false\n            }));\n        return localModels;\n    } catch (error) {\n        console.warn(\"Error fetching Ollama models: \" + error);\n    }\n};\nconst fetchOpenRouterModels = async ()=>{\n    try {\n        const response = await fetch(\"https://openrouter.ai/api/v1/models\");\n        if (!response.ok) {\n            throw new Error(\"OpenRouter server is not responding.\");\n        }\n        const { data } = await response.json();\n        const openRouterModels = data.map((model)=>({\n                modelId: model.id,\n                modelName: model.id,\n                provider: \"openrouter\",\n                hostedId: model.name,\n                platformLink: \"https://openrouter.dev\",\n                imageInput: false,\n                maxContext: model.context_length\n            }));\n        return openRouterModels;\n    } catch (error) {\n        console.error(\"Error fetching Open Router models: \" + error);\n        sonner__WEBPACK_IMPORTED_MODULE_0__.toast.error(\"Error fetching Open Router models: \" + error);\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9tb2RlbHMvZmV0Y2gtbW9kZWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBRThCO0FBQ2U7QUFFdEMsTUFBTUUsb0JBQW9CLE9BQU9DO0lBQ3RDLElBQUk7UUFDRixNQUFNQyxZQUFZO1lBQUM7WUFBVTtZQUFhO1lBQVc7WUFBUTtTQUFhO1FBRTFFLElBQUlELFFBQVFFLGdCQUFnQixFQUFFO1lBQzVCRCxVQUFVRSxJQUFJLENBQUM7UUFDakIsT0FBTztZQUNMRixVQUFVRSxJQUFJLENBQUM7UUFDakI7UUFFQSxNQUFNQyxXQUFXLE1BQU1DLE1BQU07UUFFN0IsSUFBSSxDQUFDRCxTQUFTRSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFPO1FBQ25CO1FBRUEsTUFBTUMsT0FBTyxNQUFNSixTQUFTSyxJQUFJO1FBRWhDLElBQUlDLGNBQXFCLEVBQUU7UUFFM0IsS0FBSyxNQUFNQyxZQUFZVixVQUFXO1lBQ2hDLElBQUlXO1lBRUosSUFBSUQsYUFBYSxVQUFVO2dCQUN6QkMsY0FBYztZQUNoQixPQUFPLElBQUlELGFBQWEsU0FBUztnQkFDL0JDLGNBQWM7WUFDaEIsT0FBTztnQkFDTEEsY0FBYyxHQUFZLE9BQVRELFVBQVM7WUFDNUI7WUFFQSxJQUFJWCxDQUFBQSxvQkFBQUEsOEJBQUFBLE9BQVMsQ0FBQ1ksWUFBWSxLQUFJSixLQUFLSyxnQkFBZ0IsQ0FBQ0YsU0FBUyxFQUFFO2dCQUM3RCxNQUFNRyxTQUFTaEIsdURBQVksQ0FBQ2EsU0FBUztnQkFFckMsSUFBSUksTUFBTUMsT0FBTyxDQUFDRixTQUFTO29CQUN6QkosWUFBWVAsSUFBSSxJQUFJVztnQkFDdEI7WUFDRjtRQUNGO1FBRUEsT0FBTztZQUNMRyxXQUFXVCxLQUFLSyxnQkFBZ0I7WUFDaENLLGNBQWNSO1FBQ2hCO0lBQ0YsRUFBRSxPQUFPUyxPQUFPO1FBQ2RDLFFBQVFDLElBQUksQ0FBQyxtQ0FBbUNGO0lBQ2xEO0FBQ0YsRUFBQztBQUVNLE1BQU1HLG9CQUFvQjtJQUMvQixJQUFJO1FBQ0YsTUFBTWxCLFdBQVcsTUFBTUMsTUFDckJrQixpQkFBa0MsR0FBRztRQUd2QyxJQUFJLENBQUNuQixTQUFTRSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJQyxNQUFPO1FBQ25CO1FBRUEsTUFBTUMsT0FBTyxNQUFNSixTQUFTSyxJQUFJO1FBRWhDLE1BQU1pQixjQUFxQmxCLEtBQUtNLE1BQU0sQ0FBQ2EsR0FBRyxDQUFDLENBQUNDLFFBQWdCO2dCQUMxREMsU0FBU0QsTUFBTUUsSUFBSTtnQkFDbkJDLFdBQVdILE1BQU1FLElBQUk7Z0JBQ3JCbkIsVUFBVTtnQkFDVnFCLFVBQVVKLE1BQU1FLElBQUk7Z0JBQ3BCRyxjQUFjO2dCQUNkQyxZQUFZO1lBQ2Q7UUFFQSxPQUFPUjtJQUNULEVBQUUsT0FBT1AsT0FBTztRQUNkQyxRQUFRQyxJQUFJLENBQUMsbUNBQW1DRjtJQUNsRDtBQUNGLEVBQUM7QUFFTSxNQUFNZ0Isd0JBQXdCO0lBQ25DLElBQUk7UUFDRixNQUFNL0IsV0FBVyxNQUFNQyxNQUFNO1FBRTdCLElBQUksQ0FBQ0QsU0FBU0UsRUFBRSxFQUFFO1lBQ2hCLE1BQU0sSUFBSUMsTUFBTztRQUNuQjtRQUVBLE1BQU0sRUFBRUMsSUFBSSxFQUFFLEdBQUcsTUFBTUosU0FBU0ssSUFBSTtRQUVwQyxNQUFNMkIsbUJBQW1CNUIsS0FBS21CLEdBQUcsQ0FDL0IsQ0FBQ0MsUUFJcUI7Z0JBQ3BCQyxTQUFTRCxNQUFNUyxFQUFFO2dCQUNqQk4sV0FBV0gsTUFBTVMsRUFBRTtnQkFDbkIxQixVQUFVO2dCQUNWcUIsVUFBVUosTUFBTUUsSUFBSTtnQkFDcEJHLGNBQWM7Z0JBQ2RDLFlBQVk7Z0JBQ1pJLFlBQVlWLE1BQU1XLGNBQWM7WUFDbEM7UUFHRixPQUFPSDtJQUNULEVBQUUsT0FBT2pCLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHdDQUF3Q0E7UUFDdER0Qix5Q0FBS0EsQ0FBQ3NCLEtBQUssQ0FBQyx3Q0FBd0NBO0lBQ3REO0FBQ0YsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9saWIvbW9kZWxzL2ZldGNoLW1vZGVscy50cz82NGYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRhYmxlcyB9IGZyb20gXCJAL3N1cGFiYXNlL3R5cGVzXCJcbmltcG9ydCB7IExMTSwgTExNSUQsIE9wZW5Sb3V0ZXJMTE0gfSBmcm9tIFwiQC90eXBlc1wiXG5pbXBvcnQgeyB0b2FzdCB9IGZyb20gXCJzb25uZXJcIlxuaW1wb3J0IHsgTExNX0xJU1RfTUFQIH0gZnJvbSBcIi4vbGxtL2xsbS1saXN0XCJcblxuZXhwb3J0IGNvbnN0IGZldGNoSG9zdGVkTW9kZWxzID0gYXN5bmMgKHByb2ZpbGU6IFRhYmxlczxcInByb2ZpbGVzXCI+KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgcHJvdmlkZXJzID0gW1wiZ29vZ2xlXCIsIFwiYW50aHJvcGljXCIsIFwibWlzdHJhbFwiLCBcImdyb3FcIiwgXCJwZXJwbGV4aXR5XCJdXG5cbiAgICBpZiAocHJvZmlsZS51c2VfYXp1cmVfb3BlbmFpKSB7XG4gICAgICBwcm92aWRlcnMucHVzaChcImF6dXJlXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3ZpZGVycy5wdXNoKFwib3BlbmFpXCIpXG4gICAgfVxuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcIi9hcGkva2V5c1wiKVxuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBTZXJ2ZXIgaXMgbm90IHJlc3BvbmRpbmcuYClcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBsZXQgbW9kZWxzVG9BZGQ6IExMTVtdID0gW11cblxuICAgIGZvciAoY29uc3QgcHJvdmlkZXIgb2YgcHJvdmlkZXJzKSB7XG4gICAgICBsZXQgcHJvdmlkZXJLZXk6IGtleW9mIHR5cGVvZiBwcm9maWxlXG5cbiAgICAgIGlmIChwcm92aWRlciA9PT0gXCJnb29nbGVcIikge1xuICAgICAgICBwcm92aWRlcktleSA9IFwiZ29vZ2xlX2dlbWluaV9hcGlfa2V5XCJcbiAgICAgIH0gZWxzZSBpZiAocHJvdmlkZXIgPT09IFwiYXp1cmVcIikge1xuICAgICAgICBwcm92aWRlcktleSA9IFwiYXp1cmVfb3BlbmFpX2FwaV9rZXlcIlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvdmlkZXJLZXkgPSBgJHtwcm92aWRlcn1fYXBpX2tleWAgYXMga2V5b2YgdHlwZW9mIHByb2ZpbGVcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2ZpbGU/Lltwcm92aWRlcktleV0gfHwgZGF0YS5pc1VzaW5nRW52S2V5TWFwW3Byb3ZpZGVyXSkge1xuICAgICAgICBjb25zdCBtb2RlbHMgPSBMTE1fTElTVF9NQVBbcHJvdmlkZXJdXG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobW9kZWxzKSkge1xuICAgICAgICAgIG1vZGVsc1RvQWRkLnB1c2goLi4ubW9kZWxzKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVudktleU1hcDogZGF0YS5pc1VzaW5nRW52S2V5TWFwLFxuICAgICAgaG9zdGVkTW9kZWxzOiBtb2RlbHNUb0FkZFxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLndhcm4oXCJFcnJvciBmZXRjaGluZyBob3N0ZWQgbW9kZWxzOiBcIiArIGVycm9yKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaE9sbGFtYU1vZGVscyA9IGFzeW5jICgpID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfT0xMQU1BX1VSTCArIFwiL2FwaS90YWdzXCJcbiAgICApXG5cbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9sbGFtYSBzZXJ2ZXIgaXMgbm90IHJlc3BvbmRpbmcuYClcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBjb25zdCBsb2NhbE1vZGVsczogTExNW10gPSBkYXRhLm1vZGVscy5tYXAoKG1vZGVsOiBhbnkpID0+ICh7XG4gICAgICBtb2RlbElkOiBtb2RlbC5uYW1lIGFzIExMTUlELFxuICAgICAgbW9kZWxOYW1lOiBtb2RlbC5uYW1lLFxuICAgICAgcHJvdmlkZXI6IFwib2xsYW1hXCIsXG4gICAgICBob3N0ZWRJZDogbW9kZWwubmFtZSxcbiAgICAgIHBsYXRmb3JtTGluazogXCJodHRwczovL29sbGFtYS5haS9saWJyYXJ5XCIsXG4gICAgICBpbWFnZUlucHV0OiBmYWxzZVxuICAgIH0pKVxuXG4gICAgcmV0dXJuIGxvY2FsTW9kZWxzXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS53YXJuKFwiRXJyb3IgZmV0Y2hpbmcgT2xsYW1hIG1vZGVsczogXCIgKyBlcnJvcilcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hPcGVuUm91dGVyTW9kZWxzID0gYXN5bmMgKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL29wZW5yb3V0ZXIuYWkvYXBpL3YxL21vZGVsc1wiKVxuXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBPcGVuUm91dGVyIHNlcnZlciBpcyBub3QgcmVzcG9uZGluZy5gKVxuICAgIH1cblxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG5cbiAgICBjb25zdCBvcGVuUm91dGVyTW9kZWxzID0gZGF0YS5tYXAoXG4gICAgICAobW9kZWw6IHtcbiAgICAgICAgaWQ6IHN0cmluZ1xuICAgICAgICBuYW1lOiBzdHJpbmdcbiAgICAgICAgY29udGV4dF9sZW5ndGg6IG51bWJlclxuICAgICAgfSk6IE9wZW5Sb3V0ZXJMTE0gPT4gKHtcbiAgICAgICAgbW9kZWxJZDogbW9kZWwuaWQgYXMgTExNSUQsXG4gICAgICAgIG1vZGVsTmFtZTogbW9kZWwuaWQsXG4gICAgICAgIHByb3ZpZGVyOiBcIm9wZW5yb3V0ZXJcIixcbiAgICAgICAgaG9zdGVkSWQ6IG1vZGVsLm5hbWUsXG4gICAgICAgIHBsYXRmb3JtTGluazogXCJodHRwczovL29wZW5yb3V0ZXIuZGV2XCIsXG4gICAgICAgIGltYWdlSW5wdXQ6IGZhbHNlLFxuICAgICAgICBtYXhDb250ZXh0OiBtb2RlbC5jb250ZXh0X2xlbmd0aFxuICAgICAgfSlcbiAgICApXG5cbiAgICByZXR1cm4gb3BlblJvdXRlck1vZGVsc1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBPcGVuIFJvdXRlciBtb2RlbHM6IFwiICsgZXJyb3IpXG4gICAgdG9hc3QuZXJyb3IoXCJFcnJvciBmZXRjaGluZyBPcGVuIFJvdXRlciBtb2RlbHM6IFwiICsgZXJyb3IpXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ0b2FzdCIsIkxMTV9MSVNUX01BUCIsImZldGNoSG9zdGVkTW9kZWxzIiwicHJvZmlsZSIsInByb3ZpZGVycyIsInVzZV9henVyZV9vcGVuYWkiLCJwdXNoIiwicmVzcG9uc2UiLCJmZXRjaCIsIm9rIiwiRXJyb3IiLCJkYXRhIiwianNvbiIsIm1vZGVsc1RvQWRkIiwicHJvdmlkZXIiLCJwcm92aWRlcktleSIsImlzVXNpbmdFbnZLZXlNYXAiLCJtb2RlbHMiLCJBcnJheSIsImlzQXJyYXkiLCJlbnZLZXlNYXAiLCJob3N0ZWRNb2RlbHMiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIiwiZmV0Y2hPbGxhbWFNb2RlbHMiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfT0xMQU1BX1VSTCIsImxvY2FsTW9kZWxzIiwibWFwIiwibW9kZWwiLCJtb2RlbElkIiwibmFtZSIsIm1vZGVsTmFtZSIsImhvc3RlZElkIiwicGxhdGZvcm1MaW5rIiwiaW1hZ2VJbnB1dCIsImZldGNoT3BlblJvdXRlck1vZGVscyIsIm9wZW5Sb3V0ZXJNb2RlbHMiLCJpZCIsIm1heENvbnRleHQiLCJjb250ZXh0X2xlbmd0aCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/models/fetch-models.ts\n"));

/***/ })

});